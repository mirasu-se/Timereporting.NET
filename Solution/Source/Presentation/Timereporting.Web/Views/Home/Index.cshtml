<div class="container">

    <h2 class="mt-5">Welcome to DSTX Time Reporting Solution</h2>
    <p class="lead">As a software developer, I am thrilled to present my comprehensive solution for the DSTX Arbetsprov project. This solution fulfills all the mentioned requirements and provides a seamless integration with the REST API, allowing you to efficiently manage and track your time reports.</p>

    <h4 class="mt-5">Page 1 - Workplaces [Accessible over the button "<a asp-controller="Workplace" asp-action="PreviewWorkplace">Workplaces</a>" in the application navigation bar]</h4>
    <p>This page provides an overview of all the workplaces in the system. It features a table that displays the workplaces along with their relevant details, such as name, address, and contact information. The table allows for easy sorting and searching, enabling you to quickly find the desired workplace. Additionally, the page includes options to filter the workplaces based on specific criteria, such as location or industry.</p>

    <h4 class="mt-5">Page 2 - Create Workplace [Accessible over the button "<a asp-controller="Workplace" asp-action="CreateWorkplace">Add New Workplace</a>" below the <a asp-controller="Workplace" asp-action="WorkplacePreview">Workplaces Table</a>]</h4>
    <p>This page provides a comprehensive form to create new workplaces. The form includes fields to capture all the necessary details about the workplace, including its name, address, contact information, and industry. Additionally, you can upload images or any relevant files that are associated with the workplace. The uploaded files are securely stored on our local web server, and their corresponding filenames and unique IDs are stored in a MySQL database. To ensure a smooth user experience, JavaScript and AJAX are utilized to handle form submission. A C# endpoint manages the file upload, integrates with the MySQL database, and interacts with the workplace API to create the new workplace.</p>

    <h4 class="mt-5">Page 3 - Time Reports [Accessible over the button "<a asp-controller="Timereport" asp-action="PreviewTimeReport">Time Reports</a>" in the application navigation bar]</h4>
    <p>This page features a user-friendly filter form and a table that displays the time reports. By leveraging the power of C#, I have implemented the necessary functionality to fetch and present the reports based on the selected filters. The filter form allows you to choose the workplace, select a date range, and perform advanced searches to obtain the exact information you need.</p>

    <h4 class="mt-5">Page 4 - Create Time Report [Accessible over the button " <a asp-controller="Timereport" asp-action="CreateTimereport">Submit Daily Report</a>" below the <a asp-controller="TimeReport" asp-action="TimeReportPreview">Time Reports Table</a>]</h4>
    <p>This page provides you with a comprehensive form to create new time reports. Along with capturing essential details such as the date, hours worked, and workplace, I have implemented the functionality to upload and associate images with your reports. The uploaded images are securely stored on our local web server, and the corresponding filenames and unique IDs of the new time reports are stored in a MySQL database. To ensure a smooth and seamless user experience, I have utilized JavaScript and AJAX to handle the form submission, making use of a C# endpoint that manages the image upload, integrates with the MySQL database, and interacts with the time report API.</p>


    <h2 class="mt-5">Technologies Required</h2>
    <ul>
        <li>C#</li>
        <li>.NET Core</li>
        <li>HTML</li>
        <li>JavaScript</li>
        <li>MySQL</li>
    </ul>

    <h2 class="mt-5">Technologies Delivered</h2>
    <ul>
        <li>Backend languages & technologies: C#, LINQ To SQL</li>
        <li>Design Patterns - CA [Clean Architecture] & DDD [Domain Driven Design]</li>
        <li>ORM's - EF [Entity Framework Core] & Pomelo EF Core MySql</li>
        <li>Frameworks - Asp .NET Core Web API & Asp .NET Core Web MVC</li>
        <li>Docker Containerization [Preconfigured Docker Compose Project]</li>
        <li>Frontend languages & technologies: HTML, CSS, JavaScript, jQuery, Ajax</li>
        <li>Storage systems: MySQL database over API requests, FileSystem [Local storage for report images] over API endpoints</li>
    </ul>

    <p>To access the detailed documentation for the REST API, please visit <a href="https://arbetsprov.trinax.se/docs/v1/">https://arbetsprov.trinax.se/docs/v1/</a>. You will require the provided API key: 3549d8eb0d3589078cf60e54709e5416 to authenticate your requests.</p>
</div>
