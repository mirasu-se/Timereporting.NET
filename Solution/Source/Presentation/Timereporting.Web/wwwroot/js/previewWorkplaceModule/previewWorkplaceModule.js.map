{"version":3,"file":"js/previewWorkplaceModule/previewWorkplaceModule.js","mappings":";;;;;;;;;;;;;;;;;AAAsG;AACR;AACM;AACpG;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,sFAAgC;AAC7C;AACA,aAAa,kFAA4B;AACzC;AACA,aAAa,qFAA+B;AAC5C;AACA,8CAA8C,YAAY;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,eAAe,EAAC;;;;;;;;;;;;;;;AC3E/B;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB,EAAE,KAAK;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,oDAAoD,gBAAgB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,iBAAiB;;;;;;;;;;;;;;AC5ChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,gBAAgB,EAAE,KAAK;AAC5C;AACA,mCAAmC,wBAAwB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,sDAAsD,gBAAgB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,iEAAe,eAAe;;;;;;;;;;;;;;;;;;;;;;;;ACxCuB;AACvD;AACyD;AACG;AAC4B;AACF;AACtF;AAC6D;AACG;AAC4B;AACF;AAC1F;AACA;AACA;AACA;AACA;AACA,2BAA2B,CAAC,KAAK,yBAAyB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4EAAuB;AACpD,+CAA+C,iFAA6B;AAC5E,8CAA8C,gFAA4B;AAC1E,kCAAkC,kEAAgB;AAClD;AACA,MAAM;AACN,iDAAiD,mFAA+B;AAChF,gDAAgD,kFAA8B;AAC9E,oCAAoC,oEAAkB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,CAAC,KAAK,kBAAkB;AAC5B;AACA;AACA,+BAA+B,4EAAuB;AACtD;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,+BAA+B,gEAAe;AAC9C,gCAAgC,kEAAgB;AAChD;AACA;AACA;AACA;AACA,iCAAiC,kEAAiB;AAClD,kCAAkC,oEAAkB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4EAAuB;AACpD;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4EAAuB;AACpD;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,iEAAe,0BAA0B;;;;;;;;;;;;;;ACjHzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,YAAY;AACnD,mDAAmD,KAAK,GAAG,YAAY;AACvE;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,SAAS;AAC3C;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,YAAY,aAAa,SAAS;AACzE,mDAAmD,KAAK,GAAG,YAAY;AACvE;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,YAAY,WAAW,OAAO;AACrE,mDAAmD,KAAK,GAAG,YAAY;AACvE;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,YAAY,aAAa,SAAS,WAAW,OAAO;AAC3F,mDAAmD,KAAK,GAAG,YAAY;AACvE;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,SAAS,WAAW,OAAO;AAClE,mDAAmD,KAAK,GAAG,YAAY;AACvE;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,SAAS;AAChD,mDAAmD,KAAK,GAAG,YAAY;AACvE;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,OAAO;AAC5C,mDAAmD,KAAK,GAAG,YAAY;AACvE;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,qBAAqB;;;;;;;;;;;;;;AChHpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,gCAAgC;AACjE;AACA;AACA;AACA;AACA,iEAAe,oBAAoB;;;;;;;;;;;;;;AChBnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,uBAAuB;AACzD;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,kBAAkB,YAAY,OAAO;AACtE;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,mBAAmB;;;;;;;;;;;;;;AC5FlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,gCAAgC;AACjE;AACA;AACA;AACA;AACA,iEAAe,kBAAkB;;;;;;;;;;;;;;;;;AChBsB;AACM;AACS;AACtE;AACA;AACA,8BAA8B,kEAAiB;AAC/C,iCAAiC,wEAAoB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kDAAkD;AAClE,gBAAgB,eAAe;AAC/B,gBAAgB,wBAAwB;AACxC;AACA,oHAAoH,UAAU;AAC9H;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,uFAAkC,qBAAqB;AACnG;AACA;AACA;AACA,0DAA0D,UAAU;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,UAAU;AACzE,yEAAyE,mBAAmB;AAC5F,qEAAqE,eAAe;AACpF,2DAA2D,kDAAkD;AAC7G,mEAAmE,wBAAwB;AAC3F,sDAAsD,YAAY;AAClE;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,iEAAe,+BAA+B;;;;;;;;;;;;;;;;AChFS;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,CAAC;AAC9B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,aAAa;AAC7B,gBAAgB,eAAe;AAC/B,gBAAgB,4BAA4B;AAC5C;AACA,mHAAmH,aAAa;AAChI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,uFAAkC,wBAAwB;AACvG;AACA;AACA,2DAA2D,aAAa;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,aAAa;AACzF,2EAA2E,sBAAsB;AACjG,uEAAuE,eAAe;AACtF,mEAAmE,4BAA4B;AAC/F;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,iEAAe,8BAA8B;;;;;;;;;;;;;;;;;ACpFU;AACE;AACS;AAClE;AACA;AACA,4BAA4B,qFAAgC,GAAG;AAC/D,4BAA4B,gEAAe;AAC3C,+BAA+B,sEAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,eAAe;AAC/B,gBAAgB,aAAa;AAC7B;AACA,oHAAoH,UAAU;AAC9H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,UAAU;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,UAAU;AAC3E,2EAA2E,aAAa;AACxF,uEAAuE,eAAe;AACtF,6DAA6D,YAAY;AACzE,qEAAqE,aAAa;AAClF,wDAAwD,YAAY;AACpE;AACA,oCAAoC,qBAAqB,uFAAkC,qBAAqB,sDAAsD;AACtK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,iEAAe,6BAA6B;;;;;;;;;;;;;;;ACpF5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,CAAC;AAC9B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,aAAa;AAC7B,gBAAgB,eAAe;AAC/B,gBAAgB,uBAAuB;AACvC;AACA,mHAAmH,aAAa;AAChI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,aAAa;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,aAAa;AACxF,uEAAuE,eAAe;AACtF,mEAAmE,uBAAuB;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,iEAAe,4BAA4B;;;;;;;;;;;;;;;;;;AC5EkB;AACW;AACF;AACoB;AAC1F;AACA;AACA;AACA;AACA,iCAAiC,kEAAiB;AAClD,qCAAqC,yEAAqB;AAC1D,oCAAoC,wEAAoB;AACxD,8CAA8C,kFAA8B;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,cAAc;AACrD;AACA,QAAQ;AACR;AACA;AACA,uCAAuC,cAAc;AACrD;AACA,QAAQ;AACR;AACA;AACA,uCAAuC,cAAc;AACrD;AACA,QAAQ;AACR;AACA;AACA,uCAAuC,cAAc;AACrD;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,uCAAuC,cAAc;AACrD;AACA,QAAQ;AACR;AACA;AACA,uCAAuC,cAAc;AACrD;AACA,QAAQ;AACR;AACA;AACA,uCAAuC,cAAc;AACrD;AACA,QAAQ;AACR;AACA;AACA,uCAAuC,cAAc;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,kBAAkB;;;;;;;;;;;;;;;;;;;AC/EsB;AACE;AACW;AACF;AACoB;AACtF;AACA;AACA;AACA;AACA,+BAA+B,gEAAe,mBAAmB,qFAAgC;AACjG,mCAAmC,uEAAmB;AACtD,kCAAkC,sEAAkB;AACpD,4CAA4C,gFAA4B;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,gBAAgB;;;;;;;;;;ACvD/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;ACNA,CAA2D;AAC3D;AACwG;AACM;AACI;AAClH;AACA;AACA;AACA,uCAAuC,8FAA0B;AACjE;AACA;AACA;AACA;AACA;AACA,CAAC,KAAK,kBAAkB;AACxB;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,sCAAsC,iBAAiB;AACvD;AACA;AACA;AACA,6BAA6B,4EAAuB;AACpD,sCAAsC,kGAA4B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,0CAA0C,oGAA8B;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,gB","sources":["webpack://webpack-mvc/./source/js/application/appConfig.js","webpack://webpack-mvc/./source/js/presentation/timereporting.api/clients/fallbackApiClient.js","webpack://webpack-mvc/./source/js/presentation/timereporting.api/clients/trinaxApiClient.js","webpack://webpack-mvc/./source/js/presentation/timereporting.api/handlers/selectedApiEndpointHandler.js","webpack://webpack-mvc/./source/js/presentation/timereporting.api/interfaces/fallbackTimereportApi.js","webpack://webpack-mvc/./source/js/presentation/timereporting.api/interfaces/fallbackWorkplaceApi.js","webpack://webpack-mvc/./source/js/presentation/timereporting.api/interfaces/trinaxTimereportApi.js","webpack://webpack-mvc/./source/js/presentation/timereporting.api/interfaces/trinaxWorkplaceApi.js","webpack://webpack-mvc/./source/js/presentation/timereporting.api/presenters/fallbackTimereportDataPresenter.js","webpack://webpack-mvc/./source/js/presentation/timereporting.api/presenters/fallbackWorkplaceDataPresenter.js","webpack://webpack-mvc/./source/js/presentation/timereporting.api/presenters/trinaxTimereportDataPresenter.js","webpack://webpack-mvc/./source/js/presentation/timereporting.api/presenters/trinaxWorkplaceDataPresenter.js","webpack://webpack-mvc/./source/js/presentation/timereporting.api/services/fallbackApiService.js","webpack://webpack-mvc/./source/js/presentation/timereporting.api/services/trinaxApiService.js","webpack://webpack-mvc/external var \"jQuery\"","webpack://webpack-mvc/webpack/bootstrap","webpack://webpack-mvc/webpack/runtime/define property getters","webpack://webpack-mvc/webpack/runtime/hasOwnProperty shorthand","webpack://webpack-mvc/webpack/runtime/make namespace object","webpack://webpack-mvc/./source/js/presentation/timereporting.web/views/workplace/previewWorkplaceModule.js"],"sourcesContent":["import appSettingsDevelopment from '../../../../../../Timereporting.Web/appsettings.DEVELOPMENT.json';\r\nimport appSettingsStaging from '../../../../../../Timereporting.Web/appsettings.STAGING.json';\r\nimport appSettingsProduction from '../../../../../../Timereporting.Web/appsettings.PRODUCTION.json';\r\n\r\nconst Environment = \"DEVELOPMENT\";\r\n\r\nconst getConfigurationByEnvironment = (environment) => {\r\n  switch (environment) {\r\n    case 'DEVELOPMENT':\r\n      return appSettingsDevelopment.AppConfig;\r\n    case 'STAGING':\r\n      return appSettingsStaging.AppConfig;\r\n    case 'PRODUCTION':\r\n      return appSettingsProduction.AppConfig;\r\n    default:\r\n      throw new Error(`Invalid environment: ${environment}`);\r\n  }\r\n};\r\n\r\nclass AppConfig {\r\n  constructor() {\r\n    this.config = null;\r\n    this.loadConfig();\r\n  }\r\n\r\n  loadConfig() {\r\n    const environmentConfig = getConfigurationByEnvironment(Environment);\r\n    this.config = { ...this.config, ...environmentConfig };\r\n  }\r\n\r\n  getAppBaseName() {\r\n    return this.config.AppBaseName;\r\n  }\r\n\r\n  getAppBaseUrl() {\r\n    return this.config.AppBaseUrl;\r\n  }\r\n\r\n  getAppEnvironment() {\r\n    return this.config.AppEnvironment;\r\n  }\r\n\r\n  getAppLogLevel() {\r\n    return this.config.AppLogLevel;\r\n  }\r\n\r\n  getAppVersion() {\r\n    return this.config.AppVersion;\r\n  }\r\n\r\n  getAppResourceHostingUrl() {\r\n    return this.config.AppResourceHostingUrl;\r\n  }\r\n\r\n  getAppImageFileDirectory() {\r\n    return this.config.AppImageFileDirectory;\r\n  }\r\n\r\n  getApiBaseName() {\r\n    return this.config.ApiBaseName;\r\n  }\r\n\r\n  getApiBaseUrl() {\r\n    return this.config.ApiBaseUrl;\r\n  }\r\n\r\n  getApiAuthorizationKey() {\r\n    return this.config.ApiAuthorizationKey;\r\n  }\r\n\r\n  getApiVersion() {\r\n    return this.config.ApiVersion;\r\n  }\r\n}\r\n\r\nexport default new AppConfig();\r\n","class FallbackApiClient {\r\n  constructor(apiBaseUrl) {\r\n    this.apiBaseUrl = apiBaseUrl;\r\n  }\r\n\r\n  async sendRequest(method, path, data = null) {\r\n    const url = `${this.apiBaseUrl}${path}`;\r\n    const headers = {};\r\n\r\n    if (data) {\r\n      headers['Content-Type'] = 'application/json';\r\n    }\r\n\r\n    const response = await fetch(url, {\r\n      method,\r\n      headers,\r\n      body: data ? JSON.stringify(data) : null\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Request failed with status ${response.status}`);\r\n    }\r\n\r\n    const responseData = await response.json();\r\n    return responseData;\r\n  }\r\n\r\n  async get(path) {\r\n    return this.sendRequest('GET', path);\r\n  }\r\n\r\n  async post(path, data) {\r\n    return this.sendRequest('POST', path, data);\r\n  }\r\n\r\n  async put(path, data) {\r\n    return this.sendRequest('PUT', path, data);\r\n  }\r\n\r\n  async delete(path) {\r\n    return this.sendRequest('DELETE', path);\r\n  }\r\n}\r\n\r\nexport default FallbackApiClient;","class TrinaxApiClient {\r\n    constructor(apiBaseUrl, authorizationToken) {\r\n      this.apiBaseUrl = apiBaseUrl;\r\n      this.authorizationToken = authorizationToken;\r\n    }\r\n  \r\n    async sendRequest(method, path, data = null) {\r\n      const url = `${this.apiBaseUrl}${path}`;\r\n      const headers = {\r\n        'Authorization': `bearer ${this.authorizationToken}`,\r\n        'Accept': 'application/json'\r\n      };\r\n  \r\n      if (data) {\r\n        headers['Content-Type'] = 'application/json';\r\n      }\r\n  \r\n      const response = await fetch(url, {\r\n        method,\r\n        headers,\r\n        body: data ? JSON.stringify(data) : null\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error(`Request failed with status ${response.status}`);\r\n      }\r\n  \r\n      const responseData = await response.json();\r\n      return responseData;\r\n    }\r\n  \r\n    async get(path) {\r\n      return this.sendRequest('GET', path);\r\n    }\r\n  \r\n    async post(path, data) {\r\n      return this.sendRequest('POST', path, data);\r\n    }\r\n  }\r\n\r\n  export default TrinaxApiClient;","import appConfig from '../../../application/appConfig';\r\n\r\nimport TrinaxApiClient from '../clients/trinaxApiClient';\r\nimport TrinaxApiService from '../services/trinaxApiService';\r\nimport TrinaxTimereportDataPresenter from '../presenters/trinaxTimereportDataPresenter';\r\nimport TrinaxWorkplaceDataPresenter from '../presenters/trinaxWorkplaceDataPresenter';\r\n\r\nimport FallbackApiClient from '../clients/fallbackApiClient';\r\nimport FallbackApiService from '../services/fallbackApiService';\r\nimport FallbackTimereportDataPresenter from '../presenters/fallbackTimereportDataPresenter';\r\nimport FallbackWorkplaceDataPresenter from '../presenters/fallbackWorkplaceDataPresenter';\r\n\r\n// Class definition\r\nclass SelectedApiEndpointHandler {\r\n  constructor(apiEndpoint, endpointElementId, workplaceFilterElementId) {\r\n    this.apiEndpoint = apiEndpoint;\r\n    this.workplaceFilter = $(`#${workplaceFilterElementId}`);\r\n\r\n    this.initializeServices();\r\n    this.bindEndpointChangeHandler(endpointElementId);\r\n  }\r\n\r\n  // Initialize services based on the selected API endpoint\r\n  initializeServices() {\r\n    if (this.apiEndpoint === appConfig.getApiBaseUrl()) {\r\n      this.trinaxTimereportDataPresenter = new TrinaxTimereportDataPresenter(this.apiEndpoint);\r\n      this.trinaxWorkplaceDataPresenter = new TrinaxWorkplaceDataPresenter(this.apiEndpoint);\r\n      this.trinaxApiService = new TrinaxApiService(this.apiEndpoint);\r\n      this.createWorkplaceOptionsTrinax();\r\n    } else {\r\n      this.fallbackTimereportDataPresenter = new FallbackTimereportDataPresenter(this.apiEndpoint);\r\n      this.fallbackWorkplaceDataPresenter = new FallbackWorkplaceDataPresenter(this.apiEndpoint);\r\n      this.fallbackApiService = new FallbackApiService(this.apiEndpoint);\r\n      this.createWorkplaceOptionsFallback();\r\n    }\r\n  }\r\n\r\n  // Bind the change event handler to the API endpoint selection element\r\n  bindEndpointChangeHandler(endpointElementId) {\r\n    $(`#${endpointElementId}`).on('change', () => {\r\n      this.apiEndpoint = document.getElementById(endpointElementId).value;\r\n\r\n      if (this.apiEndpoint === appConfig.getApiBaseUrl()) {\r\n        this.initializeTrinaxServices();\r\n        this.createWorkplaceOptionsTrinax();\r\n      } else {\r\n        this.initializeFallbackServices();\r\n        this.createWorkplaceOptionsFallback();\r\n      }\r\n    });\r\n  }\r\n\r\n  // Initialize Trinax services\r\n  initializeTrinaxServices() {\r\n    this.trinaxApiClient = new TrinaxApiClient(this.apiEndpoint);\r\n    this.trinaxApiService = new TrinaxApiService(this.apiEndpoint);\r\n  }\r\n\r\n  // Initialize Fallback services\r\n  initializeFallbackServices() {\r\n    this.fallbackApiClient = new FallbackApiClient(this.apiEndpoint);\r\n    this.fallbackApiService = new FallbackApiService(this.apiEndpoint);\r\n  }\r\n\r\n  // Update the API endpoint\r\n  updateEndpoint(newApiEndpoint) {\r\n    this.apiEndpoint = newApiEndpoint;\r\n  }\r\n\r\n  // Create workplace options based on the selected API endpoint\r\n  async createWorkplaceOptionsTrinax() {\r\n      const workplaceFilter = this.workplaceFilter; \r\n      try {\r\n        let workplaces;\r\n        workplaces = await this.trinaxApiService.getAllWorkplacesTrinax();\r\n        this.trinaxApiService.createSelectOptionsTrinax(workplaces, workplaceFilter);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n\r\n  // Create workplace options based on the selected API endpoint\r\n  async createWorkplaceOptionsFallback() {\r\n    const workplaceFilter = this.workplaceFilter;\r\n\r\n    try {\r\n      let workplaces;\r\n      workplaces = await this.fallbackApiService.getAllWorkplacesFallback();\r\n      this.fallbackApiService.createSelectOptionsFallback(workplaces, workplaceFilter);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  // Handle API requests based on the selected API endpoint \"workplace\"\r\n  async handleWorkplaceApiRequests() {\r\n    if (this.apiEndpoint === appConfig.getApiBaseUrl()) {\r\n      return this.trinaxApiService.handleTrinaxApiWorkplaceRequests();\r\n    } else {\r\n      return this.fallbackApiService.handleFallbackApiWorkplaceRequests();\r\n    }\r\n  }\r\n\r\n  // Handle API requests based on the selected API endpoint \"timereport\"\r\n  async handleTimereportApiRequests(fromDate, toDate, workplaceId) {\r\n    if (this.apiEndpoint === appConfig.getApiBaseUrl()) {\r\n      return this.trinaxApiService.handleTrinaxApiTimereportRequests(fromDate, toDate, workplaceId);\r\n    } else {\r\n      return this.fallbackApiService.handleFallbackApiTimereportRequests(fromDate, toDate, workplaceId);\r\n    }\r\n  }\r\n}\r\n\r\nexport default SelectedApiEndpointHandler;","class FallbackTimereportApi {\r\n  constructor(apiClient) {\r\n    this.apiClient = apiClient;\r\n  }\r\n\r\n  async getTimereportsByAllWorkplaces() {\r\n    try {\r\n      const path = \"/timereport\";\r\n      const response = await this.apiClient.get(path);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(\"Error fetching timereports:\", error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async getTimereportsByWorkplaceId(workplaceId) {\r\n    try {\r\n      const path = \"/timereport\";\r\n      const queryString = `workplace=${workplaceId}`;\r\n      const response = await this.apiClient.get(`${path}?${queryString}`);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(\"Error fetching timereports:\", error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async getTimereportByTimereportId(reportId) {\r\n    try {\r\n      const path = `/timereport/${reportId}`;\r\n      const response = await this.apiClient.get(path);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error fetching report data:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async getTimereportsByWorkplaceIdAndFromDate(workplaceId, fromDate) {\r\n    try {\r\n      const path = \"/timereport\";\r\n      const queryString = `workplace=${workplaceId}&from_date=${fromDate}`;\r\n      const response = await this.apiClient.get(`${path}?${queryString}`);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(\"Error fetching timereports:\", error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async getTimereportsByWorkplaceIdAndToDate(workplaceId, toDate) {\r\n    try {\r\n      const path = \"/timereport\";\r\n      const queryString = `workplace=${workplaceId}&to_date=${toDate}`;\r\n      const response = await this.apiClient.get(`${path}?${queryString}`);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(\"Error fetching timereports:\", error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async getTimereportsByWorkplaceIdBetweenDates(workplaceId, fromDate, toDate) {\r\n    try {\r\n      const path = \"/timereport\";\r\n      const queryString = `workplace=${workplaceId}&from_date=${fromDate}&to_date=${toDate}`;\r\n      const response = await this.apiClient.get(`${path}?${queryString}`);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(\"Error fetching timereports:\", error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async getTimereportsByAllWorkplacesBetweenDates(fromDate, toDate) {\r\n    try {\r\n      const path = \"/timereport\";\r\n      const queryString = `from_date=${fromDate}&to_date=${toDate}`;\r\n      const response = await this.apiClient.get(`${path}?${queryString}`);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(\"Error fetching timereports:\", error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async getTimereportsByAllWorkplacesAndFromDate(fromDate) {\r\n    try {\r\n      const path = \"/timereport\";\r\n      const queryString = `from_date=${fromDate}`;\r\n      const response = await this.apiClient.get(`${path}?${queryString}`);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(\"Error fetching timereports:\", error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async getTimereportsByAllWorkplacesAndToDate(toDate) {\r\n    try {\r\n      const path = \"/timereport\";\r\n      const queryString = `to_date=${toDate}`;\r\n      const response = await this.apiClient.get(`${path}?${queryString}`);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(\"Error fetching timereports:\", error);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default FallbackTimereportApi;","class FallbackWorkplaceApi {\r\n    constructor(apiClient) {\r\n      this.apiClient = apiClient;\r\n    }\r\n  \r\n    async getAllWorkplaces() {\r\n      const path = '/workplace';\r\n      return this.apiClient.get(path);\r\n    }\r\n\r\n    async getWorkplaceById(workplaceId) {\r\n      const path = `/workplace/${encodeURIComponent(workplaceId)}`;\r\n      return this.apiClient.get(path);\r\n    }    \r\n  }\r\n\r\nexport default FallbackWorkplaceApi;","class TrinaxTimereportApi {\r\n  constructor(apiClient) {\r\n    this.apiClient = apiClient;\r\n  }\r\n\r\n  async getAllTimereports() {\r\n    try {\r\n      const path = `/timereport`;\r\n      const response = await this.apiClient.get(path);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(\"Error fetching all timereports:\", error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async getTimereportByWorkplaceId(id) {\r\n    try {\r\n      const path = `/timereport/${encodeURIComponent(id)}`;\r\n      const response = await this.apiClient.get(path);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(\"Error fetching timereport:\", error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async getTimereportsByWorkplaceId(id) {\r\n    try {\r\n      const path = '/timereport';\r\n      const timereports = await this.apiClient.get(path);\r\n\r\n      if (parseInt(id) === 0) {\r\n        return timereports;\r\n      }\r\n      else {\r\n        return timereports.filter(report => report.workplace_id === parseInt(id));\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching timereports by workplace ID:\", error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async getTimereportsByWorkplaceIdAndDateRange(workplaceId, fromDate, toDate) {\r\n    try {\r\n      const filters = {\r\n        from_date: encodeURIComponent(fromDate),\r\n        to_date: encodeURIComponent(toDate)\r\n      };\r\n      const queryString = new URLSearchParams(filters).toString();\r\n      const path = `/timereport${queryString ? `?${queryString}` : ''}`;\r\n      const response = await this.apiClient.get(path);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(\"Error fetching timereports by date range:\", error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async getTimereportsByWorkplaceIdAndFromDate(workplaceId, fromDate) {\r\n    try {\r\n      const now = new Date().toISOString().split('T')[0];\r\n      return await this.getTimereportsByWorkplaceIdAndDateRange(workplaceId, fromDate, now);\r\n    } catch (error) {\r\n      console.error(\"Error fetching timereports from date:\", error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async getTimereportsByWorkplaceIdAndToDate(workplaceId, toDate) {\r\n    try {\r\n      const startOfTime = new Date(0).toISOString().slice(0, 10);\r\n      return await this.getTimereportsByWorkplaceIdAndDateRange(workplaceId, startOfTime, toDate);\r\n    } catch (error) {\r\n      console.error(\"Error fetching timereports to date:\", error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async createTimereport(data) {\r\n    try {\r\n      const path = '/timereport';\r\n      const response = await this.apiClient.post(path, data);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(\"Error creating timereport:\", error);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default TrinaxTimereportApi;","class TrinaxWorkplaceApi {\r\n    constructor(apiClient) {\r\n      this.apiClient = apiClient;\r\n    }\r\n  \r\n    async getAllWorkplaces() {\r\n      const path = '/workplace';\r\n      return this.apiClient.get(path);\r\n    }\r\n\r\n    async getWorkplaceById(workplaceId) {\r\n      const path = `/workplace/${encodeURIComponent(workplaceId)}`;\r\n      return this.apiClient.get(path);\r\n    }    \r\n  }\r\n\r\nexport default TrinaxWorkplaceApi;","import appConfig from '../../../application/appConfig';\r\nimport FallbackApiClient from '../clients/fallbackApiClient';\r\nimport FallbackWorkplaceApi from '../interfaces/fallbackWorkplaceApi';\r\n\r\nconst selectedApiEndpoint = `http://localhost:5000/api/v1`;\r\nconst fallbackApiClient = new FallbackApiClient(selectedApiEndpoint);\r\nconst fallbackWorkplaceApi = new FallbackWorkplaceApi(fallbackApiClient);\r\n\r\nclass FallbackTimereportDataPresenter {\r\n  presentTableRows(data) {\r\n    if(data != null){\r\n      console.log(\"[API RESPONSE]:\", data);\r\n      // Sort the data by report.id in descending order\r\n      // Last report should be displayed at the top for better UI/UX functionality\r\n      data.sort((b, a) => a.id - b.id);\r\n    \r\n      // Clean the time-report-table by removing all existing rows\r\n      const tableBody = document.querySelector(\"#time-report-table tbody\");\r\n      tableBody.innerHTML = \"\";\r\n    \r\n      // create new table rows based on the fetched data\r\n      data.forEach(async (report) => {\r\n        const workplace = await fallbackWorkplaceApi.getWorkplaceById(report.workplaceId);\r\n        const row = `<tr>\r\n          <td>${new Date(report.date).toISOString().split('T')[0]}</td>\r\n          <td>${workplace.name}</td>\r\n          <td>${report.hours.toFixed(2)}</td>\r\n          <td>\r\n            <button type=\"button\" class=\"btn btn-light\" data-bs-toggle=\"modal\" data-bs-target=\"#timereportDetails_${report.id}\">\r\n              <i class=\"btn btn-secondary bi bi-info-circle m-0\"></i>\r\n            </button>\r\n          </td>\r\n        </tr>`;\r\n        tableBody.insertAdjacentHTML(\"beforeend\", row);\r\n      });\r\n    }\r\n  }\r\n  \r\n  presentDetailsModal(data) {\r\n    if(data != null){\r\n      const modalContainer = document.querySelector(\"#modal-container\");\r\n      modalContainer.innerHTML = \"\";\r\n    \r\n      data.forEach(async (report) => {\r\n        const imgSrc = report.imageUrl ? `${appConfig.getAppResourceHostingUrl() + report.imageUrl}` : \"/img/default/timereport/no_time_report_image.png\";\r\n        const workplace = await fallbackWorkplaceApi.getWorkplaceById(report.workplaceId);\r\n        const modal = `\r\n        <div id=\"modal-container\"> \r\n          <div class=\"modal fade\" id=\"timereportDetails_${report.id}\" tabindex=\"-1\" aria-labelledby=\"timereportModalLabel\" aria-hidden=\"true\">\r\n            <div class=\"modal-dialog modal-dialog-centered\">\r\n              <div class=\"modal-content\">\r\n                <div class=\"modal-header\">\r\n                  <h5 class=\"modal-title\" id=\"timereportModalLabel\">\r\n                    Tidsrapportdetaljer [FALLBACK]\r\n                  </h5>\r\n                  <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Stäng\"></button>\r\n                </div>\r\n                <div class=\"card\">\r\n                  <div class=\"card-body\">\r\n                    <p id=\"id\"><strong>RAPPORT ID -</strong> ${report.id}</p>\r\n                    <p id=\"workplace\"><strong>Arbetsplats Id:</strong> ${report.workplaceId}</p>\r\n                    <p id=\"name\"><strong>Arbetsplatsnamn:</strong> ${workplace.name}</p>\r\n                    <p id=\"date\"><strong>Datum:</strong> ${new Date(report.date).toISOString().split('T')[0]}</p>\r\n                    <p id=\"hours\"><strong>Arbetstimmar:</strong> ${report.hours.toFixed(2)}</p>\r\n                    <p id=\"\"><strong>Info:</strong> ${report.info}</p>\r\n                    <div class=\"text-center\">\r\n                      <img src=\"${imgSrc}\" alt=\"Timereport image attachment\" class=\"img-fluid\">\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>`;\r\n        modalContainer.insertAdjacentHTML(\"beforeend\", modal);\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default FallbackTimereportDataPresenter;","import appConfig from '../../../application/appConfig';\r\n\r\nclass FallbackWorkplaceDataPresenter {\r\n  async presentSelectOptions(data, selectElement) {\r\n    if(data != null){\r\n      selectElement.empty();\r\n      //  selectElement.append('<option value=\"00000000-0000-0000-0000-000000000000\" class=\"get-all-option\" selected>Få alla tidrapporter</option>');\r\n      // Add options for each workplace\r\n      for (const workplace of data) {\r\n        selectElement.append($('<option>', {\r\n          value: workplace.workplaceId,\r\n          text: workplace.name,\r\n        }));\r\n      }\r\n    }\r\n  }\r\n\r\n  async presentTableRows(data) {\r\n    if(data != null){\r\n      console.log(\"[API RESPONSE]:\", data);\r\n      // Sort the data by workplace.id in descending order\r\n      // Last added workplace should be displayed at the top for better UI/UX functionality\r\n      data.sort((b, a) => a.id - b.id);\r\n      \r\n      // Clean the workplace-table by removing all existing rows\r\n      const tableBody = document.querySelector(\"#workplace-table tbody\");\r\n      tableBody.innerHTML = \"\";\r\n      \r\n      // Fetch workplace data and create new table rows based on the fetched data\r\n      for (const workplace of data) {\r\n        const row = `<tr>\r\n          <td>${workplace.id}</td>\r\n          <td>${workplace.name}</td>\r\n          <td>${workplace.createdTimeString}</td>\r\n          <td>\r\n            <button type=\"button\" class=\"btn btn-light\" data-bs-toggle=\"modal\" data-bs-target=\"#workplaceDetails_${workplace.id}\">\r\n              <i class=\"btn btn-secondary bi bi-info-circle m-0\"></i>\r\n            </button>\r\n          </td>\r\n        </tr>`;\r\n        tableBody.insertAdjacentHTML(\"beforeend\", row);\r\n      }\r\n    }\r\n  }\r\n    \r\n  presentDetailsModal(data) {\r\n  if(data != null){\r\n      const modalContainer = document.querySelector(\"#modal-container\");\r\n      modalContainer.innerHTML = \"\";\r\n      \r\n      data.forEach(async (workplace) => {\r\n        let imgSrc = workplace.imageUrl ? `${appConfig.getAppResourceHostingUrl() + workplace.imageUrl}` : \"/img/default/workplace/no_workplace_image.png\";\r\n        const modal = `\r\n          <div id=\"modal-container\"> \r\n            <div class=\"modal fade\" id=\"workplaceDetails_${workplace.id}\" tabindex=\"-1\" aria-labelledby=\"workplaceModalLabel\" aria-hidden=\"true\">\r\n              <div class=\"modal-dialog modal-dialog-centered\">\r\n                <div class=\"modal-content\">\r\n                  <div class=\"modal-header\">\r\n                    <h5 class=\"modal-title\" id=\"workplaceModalLabel\">\r\n                      Tidsrapportdetaljer [FALLBACK]\r\n                    </h5>\r\n                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Stäng\"></button>\r\n                  </div>\r\n                  <div class=\"card\">\r\n                    <div class=\"card-body\">\r\n                      <p id=\"workplace\"><strong>Arbetsplats Seq:</strong> ${workplace.id}</p>\r\n                      <p id=\"workplace\"><strong>Arbetsplats Id:</strong> ${workplace.workplaceId}</p>\r\n                      <p id=\"name\"><strong>Arbetsplatsnamn:</strong> ${workplace.name}</p>\r\n                      <p id=\"date\"><strong>Skapade tid:</strong> ${workplace.createdTimeString}</p>\r\n                      <div class=\"text-center\">\r\n                      <img src=\"${imgSrc}\" alt=\"Timereport image attachment\" class=\"img-fluid\">\r\n                    </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>`;\r\n        modalContainer.insertAdjacentHTML(\"beforeend\", modal);\r\n      });\r\n    }\r\n  }\r\n}\r\n  \r\nexport default FallbackWorkplaceDataPresenter;","import appConfig from '../../../application/appConfig';\r\nimport TrinaxApiClient from '../clients/trinaxApiClient';\r\nimport TrinaxWorkplaceApi from '../interfaces/trinaxWorkplaceApi';\r\n\r\nconst selectedApiEndpoint = document.getElementById('api-endpoint').value;\r\nconst authorizationKey = `${appConfig.getApiAuthorizationKey()}`;\r\nconst trinaxApiClient = new TrinaxApiClient(selectedApiEndpoint, authorizationKey);\r\nconst trinaxWorkplaceApi = new TrinaxWorkplaceApi(trinaxApiClient);\r\n\r\nclass TrinaxTimereportDataPresenter {\r\n  async presentTableRows(data) {\r\n    if(data != null){\r\n      console.log(\"[API RESPONSE]:\", data);\r\n      // Sort the data by report.id in descending order\r\n      // Last report should be displayed at the top for better UI/UX functionality\r\n      data.sort((b, a) => a.id - b.id);\r\n      \r\n      // Clean the time-report-table by removing all existing rows\r\n      const tableBody = document.querySelector(\"#time-report-table tbody\");\r\n      tableBody.innerHTML = \"\";\r\n      \r\n      // Fetch workplace data for each report and create new table rows based on the fetched data\r\n      for (const report of data) {\r\n        const workplace = await trinaxWorkplaceApi.getWorkplaceById(report.workplace_id);\r\n        const row = `<tr>\r\n          <td>${report.date}</td>\r\n          <td>${workplace.name}</td>\r\n          <td>${report.hours}</td>\r\n          <td>\r\n            <button type=\"button\" class=\"btn btn-light\" data-bs-toggle=\"modal\" data-bs-target=\"#timereportDetails_${report.id}\">\r\n              <i class=\"btn btn-secondary bi bi-info-circle m-0\"></i>\r\n            </button>\r\n          </td>\r\n        </tr>`;\r\n        tableBody.insertAdjacentHTML(\"beforeend\", row);\r\n      }\r\n    }\r\n  }\r\n  \r\n presentDetailsModal(data) {\r\n  if(data != null){\r\n      const modalContainer = document.querySelector(\"#modal-container\");\r\n      modalContainer.innerHTML = \"\";  \r\n      data.forEach(async (report) => {\r\n      // Since Arbetsplatsnamn is required (according to email instructions)  and not avilible by default in direct timereport reponse we will fatch it from workplaceApi\r\n      // We are here in a forEach loop which means that this will execute asyncronuse calls on workplace endpoint only to get workplace name\r\n      // This should make a lot of unnecessary requests on our API and in reality we should eather expand table columns in our database \r\n      // or if columns already exists we should reconfigure timereport API controller to expose requred data property in the API interface by sql join statement on backend side\r\n      // or in some other case use caching technology like Redis database to lower down number of requests to our API\r\n      const workplace = await trinaxWorkplaceApi.getWorkplaceById(report.workplace_id);\r\n        const modal = `\r\n          <div id=\"modal-container\"> \r\n            <div class=\"modal fade\" id=\"timereportDetails_${report.id}\" tabindex=\"-1\" aria-labelledby=\"timereportModalLabel\" aria-hidden=\"true\">\r\n              <div class=\"modal-dialog modal-dialog-centered\">\r\n                <div class=\"modal-content\">\r\n                  <div class=\"modal-header\">\r\n                    <h5 class=\"modal-title\" id=\"timereportModalLabel\">\r\n                      Tidsrapportdetaljer [TRINAX]\r\n                    </h5>\r\n                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Stäng\"></button>\r\n                  </div>\r\n                  <div class=\"card\">\r\n                    <div class=\"card-body\">\r\n                      <p id=\"id\"><strong>RAPPORT ID -</strong> ${report.id}</p>\r\n                      <p id=\"workplace\"><strong>Arbetsplats Id:</strong> ${workplace.id}</p>\r\n                      <p id=\"name\"><strong>Arbetsplatsnamn:</strong> ${workplace.name}</p>\r\n                      <p id=\"date\"><strong>Datum:</strong> ${report.date}</p>\r\n                      <p id=\"hours\"><strong>Arbetstimmar:</strong> ${report.hours}</p>\r\n                      <p id=\"\"><strong>Info:</strong> ${report.info}</p>\r\n                      <div class=\"text-center\">\r\n                        <img src=\"${report.imageUrl ? `${appConfig.getAppResourceHostingUrl() + report.imageUrl}` : \"img/default/timereport/no_time_report_image.png\"}\" alt=\"Timereport image attachment\" class=\"img-fluid\">\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>`;\r\n        modalContainer.insertAdjacentHTML(\"beforeend\", modal);\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default TrinaxTimereportDataPresenter;","class TrinaxWorkplaceDataPresenter {\r\n  async presentSelectOptions(data, selectElement) {\r\n    if(data != null){\r\n      selectElement.empty();\r\n      // selectElement.append('<option value=\"0\" class=\"get-all-option\" selected>Få alla tidrapporter</option>');\r\n      // Add options for each workplace\r\n      for (const workplace of data) {\r\n        selectElement.append($('<option>', {\r\n          value: workplace.id,\r\n          text: workplace.name,\r\n        }));\r\n      }\r\n    }\r\n  }\r\n\r\n  async presentTableRows(data) {\r\n    if(data != null){\r\n      console.log(\"[API RESPONSE]:\", data);\r\n      // Sort the data by workplace.id in descending order\r\n      // Last added workplace should be displayed at the top for better UI/UX functionality\r\n      data.sort((b, a) => a.id - b.id);\r\n     \r\n      // Clean the workplace-table by removing all existing rows\r\n      const tableBody = document.querySelector(\"#workplace-table tbody\");\r\n      tableBody.innerHTML = \"\";\r\n      \r\n      // Fetch workplace data and create new table rows based on the fetched data\r\n      for (const workplace of data) {\r\n        const row = `<tr>\r\n          <td>${workplace.id}</td>\r\n          <td>${workplace.name}</td>\r\n          <td>${workplace.created_time}</td>\r\n          <td>\r\n            <button type=\"button\" class=\"btn btn-light\" data-bs-toggle=\"modal\" data-bs-target=\"#workplaceDetails_${workplace.id}\">\r\n              <i class=\"btn btn-secondary bi bi-info-circle m-0\"></i>\r\n            </button>\r\n          </td>\r\n        </tr>`;\r\n        tableBody.insertAdjacentHTML(\"beforeend\", row);\r\n      }\r\n    }\r\n  }\r\n  \r\n presentDetailsModal(data) {\r\n  if(data != null){\r\n      const modalContainer = document.querySelector(\"#modal-container\");\r\n      modalContainer.innerHTML = \"\";     \r\n      data.forEach(async (workplace) => {\r\n        const modal = `\r\n          <div id=\"modal-container\"> \r\n            <div class=\"modal fade\" id=\"workplaceDetails_${workplace.id}\" tabindex=\"-1\" aria-labelledby=\"workplaceModalLabel\" aria-hidden=\"true\">\r\n              <div class=\"modal-dialog modal-dialog-centered\">\r\n                <div class=\"modal-content\">\r\n                  <div class=\"modal-header\">\r\n                    <h5 class=\"modal-title\" id=\"workplaceModalLabel\">\r\n                      Tidsrapportdetaljer [TRINAX]\r\n                    </h5>\r\n                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Stäng\"></button>\r\n                  </div>\r\n                  <div class=\"card\">\r\n                    <div class=\"card-body\">\r\n                      <p id=\"workplace\"><strong>Arbetsplats Id:</strong> ${workplace.id}</p>\r\n                      <p id=\"name\"><strong>Arbetsplatsnamn:</strong> ${workplace.name}</p>\r\n                      <p id=\"date\"><strong>Skapade tid:</strong> ${workplace.created_time}</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>`;\r\n        modalContainer.insertAdjacentHTML(\"beforeend\", modal);\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default TrinaxWorkplaceDataPresenter;","import FallbackApiClient from '../clients/fallbackApiClient';\r\nimport FallbackTimereportApi from '../interfaces/fallbackTimereportApi';\r\nimport FallbackWorkplaceApi from '../interfaces/fallbackWorkplaceApi';\r\nimport FallbackWorkplaceDataPresenter from '../presenters/fallbackWorkplaceDataPresenter';\r\n\r\nclass FallbackApiService {\r\n  constructor(apiEndpoint) {\r\n    this.apiEndpoint = apiEndpoint;\r\n    this.fallbackApiClient = new FallbackApiClient(this.apiEndpoint);\r\n    this.fallbackTimereportApi = new FallbackTimereportApi(this.fallbackApiClient);\r\n    this.fallbackWorkplaceApi = new FallbackWorkplaceApi(this.fallbackApiClient);\r\n    this.fallbackWorkplaceDataPresenter = new FallbackWorkplaceDataPresenter();\r\n  }\r\n\r\n  async getAllWorkplacesFallback() {\r\n    return this.fallbackWorkplaceApi.getAllWorkplaces();\r\n  }\r\n\r\n  createSelectOptionsFallback(workplaces, filterElement) {\r\n    this.fallbackWorkplaceDataPresenter.presentSelectOptions(workplaces, filterElement);\r\n  }\r\n\r\n  async handleFallbackApiWorkplaceRequests() {\r\n    const fallbackWorkplaceApi = this.fallbackWorkplaceApi;\r\n    return fallbackWorkplaceApi.getAllWorkplaces();\r\n  }  \r\n\r\n  async handleFallbackApiTimereportRequests(fromDate, toDate, workplaceId) {\r\n    const fallbackTimereportApi = this.fallbackTimereportApi;\r\n    const startTime = Date.now();\r\n\r\n    if (workplaceId) {\r\n      if (fromDate && toDate) {\r\n        const result = await fallbackTimereportApi.getTimereportsByWorkplaceIdBetweenDates(workplaceId, fromDate, toDate);\r\n        const executionTime = Date.now() - startTime;\r\n        console.log(`Execution time: ${executionTime}ms`);\r\n        return result;\r\n      } else if (fromDate) {\r\n        const result = await fallbackTimereportApi.getTimereportsByWorkplaceIdAndFromDate(workplaceId, fromDate);\r\n        const executionTime = Date.now() - startTime;\r\n        console.log(`Execution time: ${executionTime}ms`);\r\n        return result;\r\n      } else if (toDate) {\r\n        const result = await fallbackTimereportApi.getTimereportsByWorkplaceIdAndToDate(workplaceId, toDate);\r\n        const executionTime = Date.now() - startTime;\r\n        console.log(`Execution time: ${executionTime}ms`);\r\n        return result;\r\n      } else {\r\n        const result = await fallbackTimereportApi.getTimereportsByWorkplaceId(workplaceId);\r\n        const executionTime = Date.now() - startTime;\r\n        console.log(`Execution time: ${executionTime}ms`);\r\n        return result;\r\n      }\r\n    } else {\r\n      if (fromDate && toDate) {\r\n        const result = await fallbackTimereportApi.getTimereportsByAllWorkplacesBetweenDates(fromDate, toDate);\r\n        const executionTime = Date.now() - startTime;\r\n        console.log(`Execution time: ${executionTime}ms`);\r\n        return result;\r\n      } else if (fromDate) {\r\n        const result = await fallbackTimereportApi.getTimereportsByAllWorkplacesAndFromDate(fromDate);\r\n        const executionTime = Date.now() - startTime;\r\n        console.log(`Execution time: ${executionTime}ms`);\r\n        return result;\r\n      } else if (toDate) {\r\n        const result = await fallbackTimereportApi.getTimereportsByAllWorkplacesAndToDate(toDate);\r\n        const executionTime = Date.now() - startTime;\r\n        console.log(`Execution time: ${executionTime}ms`);\r\n        return result;\r\n      } else {\r\n        const result = await fallbackTimereportApi.getTimereportsByAllWorkplaces();\r\n        const executionTime = Date.now() - startTime;\r\n        console.log(`Execution time: ${executionTime}ms`);\r\n        return result;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default FallbackApiService;","import appConfig from '../../../application/appConfig';\r\nimport TrinaxApiClient from '../clients/trinaxApiClient';\r\nimport TrinaxTimereportApi from '../interfaces/trinaxTimereportApi';\r\nimport TrinaxWorkplaceApi from '../interfaces/trinaxWorkplaceApi';\r\nimport TrinaxWorkplaceDataPresenter from '../presenters/trinaxWorkplaceDataPresenter';\r\n\r\nclass TrinaxApiService {\r\n  constructor(apiEndpoint) {\r\n    this.apiEndpoint = apiEndpoint;\r\n    this.trinaxApiClient = new TrinaxApiClient(this.apiEndpoint, appConfig.getApiAuthorizationKey());\r\n    this.trinaxTimereportApi = new TrinaxTimereportApi(this.trinaxApiClient);\r\n    this.trinaxWorkplaceApi = new TrinaxWorkplaceApi(this.trinaxApiClient);\r\n    this.trinaxWorkplaceDataPresenter = new TrinaxWorkplaceDataPresenter();\r\n  }\r\n\r\n  async getAllWorkplacesTrinax() {\r\n    return this.trinaxWorkplaceApi.getAllWorkplaces();\r\n  }\r\n\r\n  createSelectOptionsTrinax(workplaces, filterElement) {\r\n    this.trinaxWorkplaceDataPresenter.presentSelectOptions(workplaces, filterElement);\r\n  }\r\n\r\n  async handleTrinaxApiWorkplaceRequests() {\r\n    const trinaxWorkplaceApi = this.trinaxWorkplaceApi;\r\n    return trinaxWorkplaceApi.getAllWorkplaces();\r\n  }  \r\n\r\n  async handleTrinaxApiTimereportRequests(fromDate, toDate, workplaceId) {\r\n    const trinaxTimereportApi = this.trinaxTimereportApi;\r\n\r\n    if (workplaceId) {\r\n      if (fromDate && toDate) {\r\n        return trinaxTimereportApi.getTimereportsByWorkplaceIdAndDateRange(workplaceId, fromDate, toDate);\r\n      } else if (fromDate) {\r\n        return trinaxTimereportApi.getTimereportsByWorkplaceIdAndFromDate(workplaceId, fromDate);\r\n      } else if (toDate) {\r\n        return trinaxTimereportApi.getTimereportsByWorkplaceIdAndToDate(workplaceId, toDate);\r\n      } else {\r\n        return trinaxTimereportApi.getTimereportsByWorkplaceId(workplaceId);\r\n      }\r\n    } else {\r\n      if (fromDate && toDate) {\r\n        return trinaxTimereportApi.getAllTimereports(fromDate, toDate);\r\n      } else if (fromDate) {\r\n        return trinaxTimereportApi.getTimereportsFromDate(fromDate);\r\n      } else if (toDate) {\r\n        return trinaxTimereportApi.getTimereportsToDate(toDate);\r\n      } else {\r\n        return trinaxTimereportApi.getAllTimereports();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default TrinaxApiService;","module.exports = jQuery;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","﻿import appConfig from '../../../../application/appConfig';\r\n\r\nimport SelectedApiEndpointHandler from '../../../timereporting.api/handlers/selectedApiEndpointHandler';\r\nimport TrinaxWorkplaceDataPresenter from '../../../timereporting.api/presenters/trinaxWorkplaceDataPresenter';\r\nimport FallbackWorkplaceDataPresenter from '../../../timereporting.api/presenters/fallbackWorkplaceDataPresenter';\r\n\r\nconst endpointElementId = 'api-endpoint';\r\nconst workplaceFilterElementId = 'workplace-filter';\r\nconst selectedApiEndpointHandler = new SelectedApiEndpointHandler(getApiEndpoint(), endpointElementId, workplaceFilterElementId);\r\n\r\nfunction getApiEndpoint() {\r\n  return document.getElementById(endpointElementId).value;\r\n}\r\n\r\n$(`#${endpointElementId}`).on('change', async function() {\r\n  const newApiEndpoint = getApiEndpoint();\r\n  selectedApiEndpointHandler.updateEndpoint(newApiEndpoint);\r\n  getWorkplaces();\r\n});\r\n\r\nasync function getWorkplaces() {\r\n  console.log(`We are fetching from ${getApiEndpoint()}`);\r\n  try {\r\n    let workplaces;\r\n\r\n    if (getApiEndpoint() === appConfig.getApiBaseUrl()) {\r\n      const trinaxDataPresenter = new TrinaxWorkplaceDataPresenter();\r\n        // Use Trinax API for fetching data from Trinax database\r\n        workplaces = await selectedApiEndpointHandler.handleWorkplaceApiRequests();\r\n        // Filter timereports based on workplace.id\r\n        workplaces = workplaces.filter(workplace => workplace.id === parseInt(workplace.id));\r\n        // Handle the response and update the UI accordingly\r\n        trinaxDataPresenter.presentTableRows(workplaces);\r\n        trinaxDataPresenter.presentDetailsModal(workplaces);\r\n    } else {\r\n        const fallbackDataPresenter = new FallbackWorkplaceDataPresenter();\r\n        // Use Timereporting API for fetching data from local MySql database\r\n        workplaces = await selectedApiEndpointHandler.handleWorkplaceApiRequests();\r\n        // Handle the response and update the UI accordingly\r\n        fallbackDataPresenter.presentTableRows(workplaces);\r\n        fallbackDataPresenter.presentDetailsModal(workplaces);\r\n    }\r\n  } catch (error) {\r\n    // Handle the error\r\n    console.log(error);\r\n  }\r\n}\r\n\r\ngetWorkplaces();"],"names":[],"sourceRoot":""}