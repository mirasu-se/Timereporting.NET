{"version":3,"file":"js/previewTimeReportModule/previewTimeReportModule.js","mappings":";;;;;;;;;;;;;;;AAA+E;AAC/E;AACA;AACA,UAAU,4EAAuB;AACjC;AACA;AACA,oBAAoB;AACpB,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,YAAY,mEAAmE;AAC/E,cAAc,qBAAqB,GAAG,qBAAqB,GAAG,qBAAqB;AACnF,GAAG;AACH;AACA;AACA,YAAY,mEAAmE;AAC/E,cAAc,qBAAqB,GAAG,qBAAqB,GAAG,qBAAqB;AACnF,GAAG;AACH;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;AACA;AACA,iEAAe,eAAe;;;;;;;;;;;;;;;;AC1EmB;AAC6B;AAC9E;AACA;AACA,uBAAuB,0EAAiC;AACxD,oBAAoB,uEAA8B;AAClD,wBAAwB,oGAAmC;AAC3D,oBAAoB,gGAA+B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,qBAAqB;AACpE,gCAAgC,sBAAsB,GAAG,YAAY,IAAI,eAAe,EAAE,MAAM;AAChG;AACA;AACA;AACA;AACA;AACA,0CAA0C,sBAAsB;AAChE,qBAAqB,YAAY,EAAE,QAAQ;AAC3C,MAAM;AACN,0CAA0C,sBAAsB;AAChE,qBAAqB,YAAY,EAAE,QAAQ;AAC3C;AACA;AACA;AACA;AACA;AACA,0CAA0C,sBAAsB;AAChE,qBAAqB,YAAY,EAAE,UAAU;AAC7C;AACA;AACA;AACA;AACA;AACA,0CAA0C,sBAAsB;AAChE,qBAAqB,YAAY,EAAE,MAAM;AACzC;AACA;AACA;AACA;AACA,iEAAe,0BAA0B,EAAC;;;;;;;;;;;;;;;ACjD1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,gBAAgB,EAAC;;;;;;;;;;AChChC;;;;;;;;;;;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;ACNA;AACkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,+EAAkB,gCAAgC;AACxD,KAAK;AACL;AACA;AACA,MAAM,+EAAkB,wCAAwC;AAChE,KAAK;AACL;AACA;AACA,iEAAe,mBAAmB,EAAC;AACnC;AACA;AACA;AACA;AACA,mDAAmD,SAAS;AAC5D;AACA;AACA;AACA;AACA,2DAA2D,UAAU;AACrE,2DAA2D,UAAU;AACrE,qEAAqE,eAAe;AACpF,oEAAoE,WAAW;AAC/E;AACA;AACA,MAAM,CAAC,mBAAmB,SAAS;AACnC,KAAK;AACL;AACA;AACA,KAAK;AACL,EAAE;AACF;AACA;AACA;AACA;AACA,6DAA6D,SAAS,WAAW,OAAO;AACxF;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,EAAE;AACF;AACA;AACA;AACA,6DAA6D,SAAS;AACtE;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,EAAE;AACF;AACA;AACA;AACA,2DAA2D,OAAO;AAClE;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,EAAE;AACF;AACA;AACA;AACA,6DAA6D,YAAY;AACzE;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,EAAE;AACF;AACA;AACA;AACA,6DAA6D,YAAY,aAAa,SAAS;AAC/F;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,EAAE;AACF;AACA;AACA;AACA,6DAA6D,YAAY,WAAW,OAAO;AAC3F;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,EAAE;AACF;AACA;AACA;AACA,6DAA6D,YAAY,aAAa,SAAS,WAAW,OAAO;AACjH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,UAAU,GAAG;AACzC,iDAAiD;AACjD,oEAAoE;AACpE;AACA;AACA,YAAY,cAAc;AAC1B,YAAY,YAAY;AACxB,YAAY,wBAAwB;AACpC;AACA,gHAAgH,UAAU;AAC1H;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,UAAU;AACnD;AACA;AACA;AACA,oCAAoC,QAAQ;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,UAAU;AACpD,4CAA4C,YAAY;AACxD,4CAA4C,mBAAmB;AAC/D,4CAA4C,YAAY;AACxD;AACA,8BAA8B,sEAAsE;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH","sources":["webpack://webpack-mvc/./source/js/application/appIdentityCore.js","webpack://webpack-mvc/./source/js/application/logging/appLogger.js","webpack://webpack-mvc/./source/js/infrastructure/datetime/dateTimeProvider.js","webpack://webpack-mvc/external var \"jQuery\"","webpack://webpack-mvc/webpack/bootstrap","webpack://webpack-mvc/webpack/runtime/define property getters","webpack://webpack-mvc/webpack/runtime/hasOwnProperty shorthand","webpack://webpack-mvc/webpack/runtime/make namespace object","webpack://webpack-mvc/./source/js/presentation/timereporting.web/views/timereport/previewTimeReportModule.js"],"sourcesContent":["import appSettings from '../../../../../../Timereporting.Web/appsettings.json';\r\n\r\nconst appIdentityCore = {\r\n  config: appSettings.appIdentity,\r\n\r\n  loadConfig(config) {\r\n    this.config = { ...this.config, ...config };\r\n  },\r\n\r\n  getAppBaseName() {\r\n    return this.config.appBaseName;\r\n  },\r\n\r\n  getAppBaseUrl() {\r\n    return this.config.appBaseUrl;\r\n  },\r\n\r\n  getAppEnvironment() {\r\n    return this.config.appEnvironment;\r\n  },\r\n\r\n  getAppLogLevel() {\r\n    return this.config.appLogLevel;\r\n  },\r\n\r\n  getAppVersion() {\r\n    return this.config.appVersion;\r\n  },\r\n\r\n  getAppMaxRequestSize() {\r\n    return this.config.appMaxRequestSize;\r\n  },\r\n\r\n  getApiBaseName() {\r\n    return this.config.apiBaseName;\r\n  },\r\n\r\n  getApiBaseUrl() {\r\n    return this.config.apiBaseUrl;\r\n  },\r\n\r\n  getApiEnvironment() {\r\n    return this.config.apiEnvironment;\r\n  },\r\n\r\n  getApiVersion() {\r\n    return this.config.apiVersion;\r\n  },\r\n\r\n  splitVersion(version) {\r\n    return version.split('.');\r\n  },\r\n\r\n  getAppSyncVersion() {\r\n    const { appBuildMajorVersion, appBuildMinorVersion, appBuildPatchVersion } = this.config;\r\n    return `${appBuildMajorVersion}.${appBuildMinorVersion}.${appBuildPatchVersion}`;\r\n  },\r\n\r\n  getApiSyncVersion() {\r\n    const { apiBuildMajorVersion, apiBuildMinorVersion, apiBuildPatchVersion } = this.config;\r\n    return `${apiBuildMajorVersion}.${apiBuildMinorVersion}.${apiBuildPatchVersion}`;\r\n  },\r\n\r\n  getAppEnvironmentUrl() {\r\n    if (this.config.appEnvironment === 'DEVELOPMENT') {\r\n      return 'http://localhost:5001';\r\n    } else if (this.config.appEnvironment === 'STAGING') {\r\n      return 'https://staging-domain.com';\r\n    } else if (this.config.appEnvironment === 'PRODUCTION') {\r\n      return 'https://production-domain.com';\r\n    }\r\n  },\r\n};\r\n\r\nexport default appIdentityCore;","import appIdentityCore from '../appIdentityCore';\r\nimport dateTimeProvider from '../../infrastructure/datetime/dateTimeProvider';\r\n\r\n\r\nconst appEnvironment = appIdentityCore.getAppEnvironment();\r\nconst appLogLevel = appIdentityCore.getAppLogLevel();\r\nconst currentDateTime = dateTimeProvider.getCurrentDateTime();\r\nconst currentTime = dateTimeProvider.getCurrentTime();\r\n\r\nclass appLogger {\r\n  constructor(appLogLevel) {\r\n    this.appEnvironment = appEnvironment;\r\n    this.appLogLevel = appLogLevel;\r\n    this.currentDateTime = currentDateTime;\r\n    this.currentTime = currentTime;\r\n  }\r\n\r\n  logTitle(label, appLogLevel = this.appLogLevel, includeTime = true) {\r\n    if (this.appEnvironment === 'DEVELOPMENT') {\r\n      const dateTimePrefix = includeTime ? `[${this.currentDateTime}] ` : '';\r\n      console.groupCollapsed(`${this.currentDateTime} [${appLogLevel}] ${dateTimePrefix}${label}`);\r\n    }\r\n  }\r\n\r\n  logMessage(message, includeTime) {\r\n    if (this.appEnvironment === 'DEVELOPMENT') {\r\n      const timePrefix = includeTime ? `${this.currentDateTime} -` : '';\r\n      console.log(`${timePrefix} ${message}`);\r\n    } else {\r\n      const timePrefix = includeTime ? `${this.currentDateTime} -` : '';\r\n      console.log(`${timePrefix} ${message}`);\r\n    }\r\n  }\r\n\r\n  logException(exception, includeTime) {\r\n    if (this.appEnvironment === 'DEVELOPMENT') {\r\n      const timePrefix = includeTime ? `${this.currentDateTime} -` : '';\r\n      console.log(`${timePrefix} ${exception}`);\r\n    }\r\n  }\r\n\r\n  logError(error, includeTime) {\r\n    if (this.appEnvironment === 'DEVELOPMENT') {\r\n      const timePrefix = includeTime ? `${this.currentDateTime} -` : '';\r\n      console.log(`${timePrefix} ${error}`);\r\n    }\r\n  }\r\n}\r\n\r\nexport default new appLogger(appLogLevel);\r\n","// A class for providing date and time information\r\nclass dateTimeProvider {\r\n  // Get the current date and time\r\n  static getCurrentDateTime() {\r\n    const currentDate = new Date();\r\n    const options = {\r\n      day: '2-digit',\r\n      month: '2-digit',\r\n      year: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      second: '2-digit',\r\n      fractionalSecondDigits: 3,\r\n    };\r\n    // Return the formatted current date and time as a string\r\n    return currentDate.toLocaleString('en-GB', options);\r\n  }\r\n\r\n  // Get the current time\r\n  static getCurrentTime() {\r\n    const currentDate = new Date();\r\n    const options = {\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      second: '2-digit',\r\n      fractionalSecondDigits: 3,\r\n    };\r\n    // Return the formatted current time as a string\r\n    return currentDate.toLocaleString('en-GB', options);\r\n  }\r\n}\r\n\r\nexport default dateTimeProvider; ","module.exports = jQuery;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","﻿// Import application logger from appLogger.js\r\nimport appLogger from '../../../../application/logging/appLogger';\r\n\r\n// Define the fetchAllTimereports component\r\nfunction fetchAllTimereports() {\r\n  // Make an API request to fetch all timereports\r\n  fetch(\"http://localhost:5000/api/v1/timereport\")\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      // Process the fetched data\r\n      processTimereports(data);\r\n      appLogger.logError(\"fetchAllTimereports:\", data); // Log the error using the appLogger\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error fetching timereports:\", error);\r\n      appLogger.logError(\"Error fetching timereports:\", error); // Log the error using the appLogger\r\n    });\r\n}\r\n\r\nexport default fetchAllTimereports;\r\n\r\n\r\nfunction fetchTimereportByTimereportId(reportId) {\r\n  // Make a GET request to fetch the report data\r\n  fetch(`http://localhost:5000/api/v1/timereport/${reportId}`)\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      // Update the modal with the fetched report data\r\n      document.getElementById(`reportModalLabel`).innerText = 'Time Report Details';\r\n      document.getElementById(`name`).innerText = `Date: ${data.name}`;     \r\n      document.getElementById(`date`).innerText = `Date: ${data.date}`;\r\n      document.getElementById(`workplace`).innerText = `Workplace: ${data.workplace}`;\r\n      document.getElementById(`hours`).innerText = `Hours Worked: ${data.hours}`;\r\n      \r\n      // Show the modal\r\n      $(`#reportDetails_${reportId}`).modal('show');\r\n    })\r\n    .catch(error => {\r\n      console.error('Error fetching report data:', error);\r\n    });\r\n} window.fetchTimereportByTimereportId = fetchTimereportByTimereportId;\r\n\r\n\r\nfunction fetchTimereportsBetweenDatesForAllWorkplaces(fromDate, toDate) {\r\n  // Make an API request to fetch timereports between the selected dates for all workplaces\r\n  fetch(`http://localhost:5000/api/v1/timereport?from_date=${fromDate}&to_date=${toDate}`)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      // Process the fetched data\r\n      processTimereports(data);\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error fetching timereports:\", error);\r\n    });\r\n} window.fetchTimereportsBetweenDatesForAllWorkplaces = fetchTimereportsBetweenDatesForAllWorkplaces;\r\n\r\nfunction fetchTimereportsByStartDateForAllWorkplaces(fromDate) {\r\n  // Make an API request to fetch timereports starting from the selected date for all workplaces\r\n  fetch(`http://localhost:5000/api/v1/timereport?from_date=${fromDate}`)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      // Process the fetched data\r\n      processTimereports(data);\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error fetching timereports:\", error);\r\n    });\r\n} window.fetchTimereportsByStartDateForAllWorkplaces = fetchTimereportsByStartDateForAllWorkplaces;\r\n\r\nfunction fetchTimereportsByEndDateForAllWorkplaces(toDate) {\r\n  // Make an API request to fetch timereports up to the selected end date for all workplaces\r\n  fetch(`http://localhost:5000/api/v1/timereport?to_date=${toDate}`)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      // Process the fetched data\r\n      processTimereports(data);\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error fetching timereports:\", error);\r\n    });\r\n} window.fetchTimereportsByEndDateForAllWorkplaces = fetchTimereportsByEndDateForAllWorkplaces;\r\n\r\nfunction fetchTimereportsByWorkplace(workplaceId) {\r\n  // Make an API request to fetch timereports for the selected workplace\r\n  fetch(`http://localhost:5000/api/v1/timereport?workplace=${workplaceId}`)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      // Process the fetched data\r\n      processTimereports(data);\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error fetching timereports:\", error);\r\n    });\r\n} window.fetchTimereportsByWorkplace = fetchTimereportsByWorkplace;\r\n\r\nfunction fetchTimereportsByStartDate(workplaceId, fromDate) {\r\n  // Make an API request to fetch timereports starting from the selected date for the selected workplace\r\n  fetch(`http://localhost:5000/api/v1/timereport?workplace=${workplaceId}&from_date=${fromDate}`)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      // Process the fetched data\r\n      processTimereports(data);\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error fetching timereports:\", error);\r\n    });\r\n} window.fetchTimereportsByStartDate = fetchTimereportsByStartDate;\r\n\r\nfunction fetchTimereportsByEndDate(workplaceId, toDate) {\r\n  // Make an API request to fetch timereports up to the selected end date for the selected workplace\r\n  fetch(`http://localhost:5000/api/v1/timereport?workplace=${workplaceId}&to_date=${toDate}`)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      // Process the fetched data\r\n      processTimereports(data);\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error fetching timereports:\", error);\r\n    });\r\n} window.fetchTimereportsByEndDate = fetchTimereportsByEndDate;\r\n\r\nfunction fetchTimereportsBetweenDates(workplaceId, fromDate, toDate) {\r\n  // Make an API request to fetch timereports between the selected dates for the selected workplace\r\n  fetch(`http://localhost:5000/api/v1/timereport?workplace=${workplaceId}&from_date=${fromDate}&to_date=${toDate}`)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      // Process the fetched data\r\n      processTimereports(data);\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error fetching timereports:\", error);\r\n    });\r\n} window.fetchTimereportsBetweenDates = fetchTimereportsBetweenDates;\r\n\r\nfunction fetchTimeReports(event) {\r\n  event.preventDefault();\r\n\r\n  // Get selected values\r\n  var workplaceId = document.getElementById(\"workplace-filter\").value;\r\n  var fromDate = document.getElementById(\"from-date\").value;\r\n  var toDate = document.getElementById(\"to-date\").value;\r\n\r\n  // Determine the appropriate action based on the selected filters\r\n  if (workplaceId && fromDate && toDate) {\r\n    // Fetch timereports between selected dates for selected workplace\r\n    fetchTimereportsBetweenDates(workplaceId, fromDate, toDate);\r\n  } else if (workplaceId && fromDate) {\r\n    // Fetch timereports starting from the selected date for selected workplace\r\n    fetchTimereportsByStartDate(workplaceId, fromDate);\r\n  } else if (workplaceId && toDate) {\r\n    // Fetch timereports up to the selected end date for selected workplace\r\n    fetchTimereportsByEndDate(workplaceId, toDate);\r\n  } else if (workplaceId) {\r\n    // Fetch timereports for the selected workplace\r\n    fetchTimereportsByWorkplace(workplaceId);\r\n  } else if (fromDate && toDate) {\r\n    // Fetch timereports between the selected dates for all workplaces\r\n    fetchTimereportsBetweenDatesForAllWorkplaces(fromDate, toDate);\r\n  } else if (fromDate) {\r\n    // Fetch timereports starting from the selected date for all workplaces\r\n    fetchTimereportsByStartDateForAllWorkplaces(fromDate);\r\n  } else if (toDate) {\r\n    // Fetch timereports up to the selected end date for all workplaces\r\n    fetchTimereportsByEndDateForAllWorkplaces(toDate);\r\n  } else {\r\n    // Fetch all timereports from all workplaces\r\n    fetchAllTimereports();\r\n  }\r\n} window.fetchTimeReports = fetchTimeReports;\r\n\r\nfunction processTimereports(data) {\r\n  console.log(\"Processing timereports:\", data);\r\n  // Sort the data by report.id in ascending order\r\n  data.sort((a, b) => a.id - b.id);\r\n\r\n  // Clean the time-report-table by removing all existing rows\r\n  const tableBody = document.querySelector(\"#time-report-table tbody\");\r\n  tableBody.innerHTML = \"\";\r\n\r\n  // Generate new table rows based on the fetched data\r\n  data.forEach((report) => {\r\n    const buttonId = `btn_${report.id}`; // Unique ID for the button\r\n    const dateParts = report.date.split('T')[0]; // Extract the date part before the 'T' delimiter\r\n    const formattedDate = dateParts.split('-').reverse().join('-'); // Rearrange the date parts to format it as 'YYYY-MM-DD'\r\n\r\n    const row = `<tr>\r\n      <td>${formattedDate}</td>\r\n      <td>${report.name}</td>\r\n      <td>${report.hours.toFixed(2)}</td>\r\n      <td>\r\n        <button type=\"button\" class=\"btn btn-light\" data-bs-toggle=\"modal\" data-bs-target=\"#timereportDetails_${report.id}\">\r\n          <i class=\"btn btn-secondary bi bi-info-circle m-0\"></i>\r\n        </button>\r\n      </td>\r\n    </tr>`;\r\n    tableBody.insertAdjacentHTML(\"beforeend\", row);\r\n  });\r\n\r\n  // Generate the modal elements\r\n  const modalContainer = document.querySelector(\"#modal-container\");\r\n  modalContainer.innerHTML = \"\";\r\n\r\n  data.forEach((report) => {\r\n    const modalId = `timereportDetails_${report.id}`;\r\n\r\n    const modal = `\r\n    <div id=\"modal-container\"> \r\n      <div class=\"modal fade\" id=\"${modalId}\" tabindex=\"-1\" aria-labelledby=\"timereportModalLabel\" aria-hidden=\"true\">\r\n        <div class=\"modal-dialog modal-dialog-centered\">\r\n          <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n              <h5 class=\"modal-title\" id=\"timereportModalLabel\">\r\n                Tidsrapportdetaljer\r\n              </h5>\r\n              <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Stäng\"></button>\r\n            </div>\r\n            <div class=\"card\">\r\n              <div class=\"card-body\">\r\n                <p><strong>Id:</strong> ${report.id}</p>\r\n                <p><strong>Name:</strong> ${report.name}</p>\r\n                <p><strong>Time:</strong> ${report.createdTime}</p>\r\n                <p><strong>Info:</strong> ${report.info}</p>\r\n                <div class=\"text-center\">\r\n                  <img src=\"${report.imageUrl || '/img/default/timereport/no_time_report_image.png'}\" alt=\"Workplace Image\" class=\"img-fluid\">\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>`;\r\n    modalContainer.insertAdjacentHTML(\"beforeend\", modal);\r\n  });\r\n}\r\n"],"names":[],"sourceRoot":""}