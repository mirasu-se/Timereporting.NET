{"version":3,"file":"js/previewTimeReportModule/previewTimeReportModule.js","mappings":";;;;;;;;;;;;;;;;;AAAsG;AACR;AACM;AACpG;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,sFAAgC;AAC7C;AACA,aAAa,kFAA4B;AACzC;AACA,aAAa,qFAA+B;AAC5C;AACA,8CAA8C,YAAY;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,eAAe,EAAC;;;;;;;;;;;;;;;AC3E/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kBAAkB,YAAY,OAAO;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gCAAgC,uBAAuB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,aAAa;;;;;;;;;;;;;;;;;ACrD2B;AACF;AACJ;AACjD;AACA;AACA,4BAA4B,qFAAgC,GAAG;AAC/D,4BAA4B,wDAAe;AAC3C,yBAAyB,+DAAY;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,YAAY;AAC1B,cAAc,eAAe;AAC7B,cAAc,aAAa;AAC3B;AACA,kHAAkH,UAAU;AAC5H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,UAAU;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,UAAU;AACzE,yEAAyE,mBAAmB;AAC5F,qEAAqE,eAAe;AACpF,2DAA2D,YAAY;AACvE,mEAAmE,aAAa;AAChF,sDAAsD,YAAY;AAClE;AACA,kCAAkC,uEAAuE;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,iEAAe,oBAAoB;;;;;;;;;;;;;;AChFnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,gBAAgB,EAAE,KAAK;AAC5C;AACA,mCAAmC,wBAAwB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,sDAAsD,gBAAgB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,iEAAe,eAAe,EAAC;;;;;;;;;;;;;;;ACxCjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,gCAAgC;AACjE;AACA;AACA;AACA;AACA,iEAAe,YAAY;;;;;;;;;;;;;;;;AChBiD;AAC5E;AACA,oCAAoC,2EAAuB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,0FAA0F,YAAY;AACtG;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,SAAS;AACzF;AACA;AACA;AACA;AACA;AACA,QAAQ,CAAC,mBAAmB,SAAS;AACrC,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,0FAA0F,YAAY,aAAa,SAAS;AAC5H;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,0FAA0F,YAAY,WAAW,OAAO;AACxH;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,0FAA0F,YAAY,aAAa,SAAS,WAAW,OAAO;AAC9I;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4FAA4F,SAAS,WAAW,OAAO;AACvH;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,4FAA4F,SAAS;AACrG;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,0FAA0F,OAAO;AACjG;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,iEAAe,gBAAgB,EAAC;AAChC;AACA;;;;;;;;;;;;;;;;ACzHoG;AAChB;AACpF;AACA;AACA,mCAAmC,iFAAsB;AACzD,sCAAsC,8FAAyB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,kDAAkD;AAChE,cAAc,eAAe;AAC7B,cAAc,wBAAwB;AACtC;AACA,kHAAkH,UAAU;AAC5H;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,UAAU;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,UAAU;AACvE,uEAAuE,mBAAmB;AAC1F,mEAAmE,eAAe;AAClF,yDAAyD,kDAAkD;AAC3G,iEAAiE,wBAAwB;AACzF,oDAAoD,YAAY;AAChE;AACA,gCAAgC,uEAAuE;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,iEAAe,uBAAuB;;;;;;;;;;;;;;AC1EtC;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB,EAAE,KAAK;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,oDAAoD,gBAAgB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,sBAAsB;;;;;;;;;;;;;;AC5CrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,gCAAgC;AACjE;AACA;AACA;AACA;AACA,iEAAe,yBAAyB;;;;;;;;;;AChBxC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;ACNA,CAA2D;AACkB;AACO;AACc;AACX;AACD;AACtF;AACA;AACA;AACA;AACA;AACA,4BAA4B,CAAC;AAC7B;AACA,oCAAoC,YAAY;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,aAAa,IAAI,eAAe;AAC3E;AACA,KAAK;AACL,IAAI;AACJ;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,0BAA0B,CAAC;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,CAAC;AACD;AACA,4BAA4B,8EAAe,cAAc,qFAAgC;AACzF,0BAA0B,uFAAa;AACvC,iCAAiC,8FAAoB;AACrD;AACA,mCAAmC,iFAAsB;AACzD,6BAA6B,sFAAgB;AAC7C;AACA;AACA;AACA,sCAAsC,YAAY;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,mD","sources":["webpack://webpack-mvc/./source/js/application/appConfig.js","webpack://webpack-mvc/./source/js/presentation/arbetsprov.trinax.api/timereport/timereportApi.js","webpack://webpack-mvc/./source/js/presentation/arbetsprov.trinax.api/timereport/timereportApiService.js","webpack://webpack-mvc/./source/js/presentation/arbetsprov.trinax.api/trinaxApiClient.js","webpack://webpack-mvc/./source/js/presentation/arbetsprov.trinax.api/workplace/workplaceApi.js","webpack://webpack-mvc/./source/js/presentation/timereporting.api/timereport/timereportingApi.js","webpack://webpack-mvc/./source/js/presentation/timereporting.api/timereport/timereportingApiService.js","webpack://webpack-mvc/./source/js/presentation/timereporting.api/timereportingApiClient.js","webpack://webpack-mvc/./source/js/presentation/timereporting.api/workplace/timereportingWorkplaceApi.js","webpack://webpack-mvc/external var \"jQuery\"","webpack://webpack-mvc/webpack/bootstrap","webpack://webpack-mvc/webpack/runtime/define property getters","webpack://webpack-mvc/webpack/runtime/hasOwnProperty shorthand","webpack://webpack-mvc/webpack/runtime/make namespace object","webpack://webpack-mvc/./source/js/presentation/timereporting.web/views/timereport/previewTimeReportModule.js"],"sourcesContent":["import appSettingsDevelopment from '../../../../../../Timereporting.Web/appsettings.DEVELOPMENT.json';\r\nimport appSettingsStaging from '../../../../../../Timereporting.Web/appsettings.STAGING.json';\r\nimport appSettingsProduction from '../../../../../../Timereporting.Web/appsettings.PRODUCTION.json';\r\n\r\nconst Environment = \"DEVELOPMENT\";\r\n\r\nconst getConfigurationByEnvironment = (environment) => {\r\n  switch (environment) {\r\n    case 'DEVELOPMENT':\r\n      return appSettingsDevelopment.AppConfig;\r\n    case 'STAGING':\r\n      return appSettingsStaging.AppConfig;\r\n    case 'PRODUCTION':\r\n      return appSettingsProduction.AppConfig;\r\n    default:\r\n      throw new Error(`Invalid environment: ${environment}`);\r\n  }\r\n};\r\n\r\nclass AppConfig {\r\n  constructor() {\r\n    this.config = null;\r\n    this.loadConfig();\r\n  }\r\n\r\n  loadConfig() {\r\n    const environmentConfig = getConfigurationByEnvironment(Environment);\r\n    this.config = { ...this.config, ...environmentConfig };\r\n  }\r\n\r\n  getAppBaseName() {\r\n    return this.config.AppBaseName;\r\n  }\r\n\r\n  getAppBaseUrl() {\r\n    return this.config.AppBaseUrl;\r\n  }\r\n\r\n  getAppEnvironment() {\r\n    return this.config.AppEnvironment;\r\n  }\r\n\r\n  getAppLogLevel() {\r\n    return this.config.AppLogLevel;\r\n  }\r\n\r\n  getAppVersion() {\r\n    return this.config.AppVersion;\r\n  }\r\n\r\n  getAppResourceHostingUrl() {\r\n    return this.config.AppResourceHostingUrl;\r\n  }\r\n\r\n  getAppImageFileDirectory() {\r\n    return this.config.AppImageFileDirectory;\r\n  }\r\n\r\n  getApiBaseName() {\r\n    return this.config.ApiBaseName;\r\n  }\r\n\r\n  getApiBaseUrl() {\r\n    return this.config.ApiBaseUrl;\r\n  }\r\n\r\n  getApiAuthorizationKey() {\r\n    return this.config.ApiAuthorizationKey;\r\n  }\r\n\r\n  getApiVersion() {\r\n    return this.config.ApiVersion;\r\n  }\r\n}\r\n\r\nexport default new AppConfig();\r\n","class TimereportApi {\r\n  constructor(apiClient) {\r\n    this.apiClient = apiClient;\r\n  }\r\n\r\n  async getAllTimereports() {\r\n    const path = `/timereport`;\r\n    return this.apiClient.get(path);\r\n  }\r\n\r\n  async getTimereportsByDateRange(fromDate, toDate) {\r\n    const filters = {\r\n      from_date: encodeURIComponent(fromDate),\r\n      to_date: encodeURIComponent(toDate)\r\n    };\r\n    const queryString = new URLSearchParams(filters).toString();\r\n    const path = `/timereport${queryString ? `?${queryString}` : ''}`;\r\n    return this.apiClient.get(path);\r\n  }\r\n\r\n  async getTimereportsFromDate(fromDate) {\r\n    const now = new Date().toISOString().split('T')[0];\r\n    return this.getTimereportsByDateRange(fromDate, now);\r\n  }\r\n\r\n  async getTimereportsToDate(toDate) {\r\n    const startOfTime = new Date(0).toISOString().slice(0, 10);\r\n    return this.getTimereportsByDateRange(startOfTime, toDate);\r\n  }\r\n\r\n  async getAllTimereportsWithDateFilter(fromDate, toDate) {\r\n    if (fromDate && toDate) {\r\n      return this.getTimereportsByDateRange(fromDate, toDate);\r\n    } else if (fromDate) {\r\n      return this.getTimereportsFromDate(fromDate);\r\n    } else if (toDate) {\r\n      return this.getTimereportsToDate(toDate);\r\n    } else {\r\n      return this.getAllTimereports();\r\n    }\r\n  }\r\n\r\n  async getTimereport(id) {\r\n    const path = `/timereport/${encodeURIComponent(id)}`;\r\n    return this.apiClient.get(path);\r\n  }\r\n\r\n  async createTimereport(data) {\r\n    const path = '/timereport';\r\n    return this.apiClient.post(path, data);\r\n  }\r\n}\r\n\r\nexport default TimereportApi;","import appConfig from '../../../application/appConfig';\r\nimport WorkplaceApi from '../workplace/workplaceApi';\r\nimport TrinaxApiClient from '../trinaxApiClient';\r\n\r\nconst selectedApiEndpoint = document.getElementById('api-endpoint').value;\r\nconst authorizationKey = `${appConfig.getApiAuthorizationKey()}`;\r\nconst trinaxApiClient = new TrinaxApiClient(selectedApiEndpoint, authorizationKey);\r\nconst workplaceApi = new WorkplaceApi(trinaxApiClient);\r\n\r\nclass TimereportApiService {\r\n  async createTimereportTableRows(data) {\r\n    console.log(\"[API RESPONSE]:\", data);\r\n    // Sort the data by report.id in descending order\r\n    // Last report should be displayed at the top for better UI/UX functionality\r\n    data.sort((b, a) => a.id - b.id);\r\n    \r\n    // Clean the time-report-table by removing all existing rows\r\n    const tableBody = document.querySelector(\"#time-report-table tbody\");\r\n    tableBody.innerHTML = \"\";\r\n    \r\n    // Fetch workplace data for each report and create new table rows based on the fetched data\r\n    for (const report of data) {\r\n      const workplace = await workplaceApi.getWorkplaceById(report.workplace_id);\r\n      const row = `<tr>\r\n        <td>${report.date}</td>\r\n        <td>${workplace.name}</td>\r\n        <td>${report.hours}</td>\r\n        <td>\r\n          <button type=\"button\" class=\"btn btn-light\" data-bs-toggle=\"modal\" data-bs-target=\"#timereportDetails_${report.id}\">\r\n            <i class=\"btn btn-secondary bi bi-info-circle m-0\"></i>\r\n          </button>\r\n        </td>\r\n      </tr>`;\r\n      tableBody.insertAdjacentHTML(\"beforeend\", row);\r\n    }\r\n  }\r\n  \r\n createTimereportDetailsModal(data) {\r\n    const modalContainer = document.querySelector(\"#modal-container\");\r\n    modalContainer.innerHTML = \"\";\r\n    \r\n    data.forEach(async (report) => {\r\n    // Since Arbetsplatsnamn is required (according to email instructions)  and not avilible by default in direct timereport reponse we will fatch it from workplaceApi\r\n    // We are here in a forEach loop which means that this will execute asyncronuse calls on workplace endpoint only to get workplace name\r\n    // This should make a lot of unnecessary reqwuests on our API and in reality we should eaither expand table columns in our database \r\n    // or if columns already exists we should reconfigure timereport API controller to expose requred data property in the API interface\r\n    const workplace = await workplaceApi.getWorkplaceById(report.workplace_id);\r\n      const modal = `\r\n        <div id=\"modal-container\"> \r\n          <div class=\"modal fade\" id=\"timereportDetails_${report.id}\" tabindex=\"-1\" aria-labelledby=\"timereportModalLabel\" aria-hidden=\"true\">\r\n            <div class=\"modal-dialog modal-dialog-centered\">\r\n              <div class=\"modal-content\">\r\n                <div class=\"modal-header\">\r\n                  <h5 class=\"modal-title\" id=\"timereportModalLabel\">\r\n                    Tidsrapportdetaljer\r\n                  </h5>\r\n                  <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Stäng\"></button>\r\n                </div>\r\n                <div class=\"card\">\r\n                  <div class=\"card-body\">\r\n                    <p id=\"id\"><strong>RAPPORT ID -</strong> ${report.id}</p>\r\n                    <p id=\"workplace\"><strong>Arbetsplats Id:</strong> ${report.workplaceId}</p>\r\n                    <p id=\"name\"><strong>Arbetsplatsnamn:</strong> ${workplace.name}</p>\r\n                    <p id=\"date\"><strong>Datum:</strong> ${report.date}</p>\r\n                    <p id=\"hours\"><strong>Arbetstimmar:</strong> ${report.hours}</p>\r\n                    <p id=\"\"><strong>Info:</strong> ${report.info}</p>\r\n                    <div class=\"text-center\">\r\n                      <img src=\"${report.imageFile || '/img/default/timereport/no_time_report_image.png'}\" alt=\"Workplace Image\" class=\"img-fluid\">\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>`;\r\n      modalContainer.insertAdjacentHTML(\"beforeend\", modal);\r\n    });\r\n  }\r\n}\r\n\r\nexport default TimereportApiService;","class TrinaxApiClient {\r\n    constructor(apiBaseUrl, authorizationToken) {\r\n      this.apiBaseUrl = apiBaseUrl;\r\n      this.authorizationToken = authorizationToken;\r\n    }\r\n  \r\n    async sendRequest(method, path, data = null) {\r\n      const url = `${this.apiBaseUrl}${path}`;\r\n      const headers = {\r\n        'Authorization': `bearer ${this.authorizationToken}`,\r\n        'Accept': 'application/json'\r\n      };\r\n  \r\n      if (data) {\r\n        headers['Content-Type'] = 'application/json';\r\n      }\r\n  \r\n      const response = await fetch(url, {\r\n        method,\r\n        headers,\r\n        body: data ? JSON.stringify(data) : null\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error(`Request failed with status ${response.status}`);\r\n      }\r\n  \r\n      const responseData = await response.json();\r\n      return responseData;\r\n    }\r\n  \r\n    async get(path) {\r\n      return this.sendRequest('GET', path);\r\n    }\r\n  \r\n    async post(path, data) {\r\n      return this.sendRequest('POST', path, data);\r\n    }\r\n  }\r\n\r\n  export default TrinaxApiClient;\r\n","class WorkplaceApi {\r\n    constructor(apiClient) {\r\n      this.apiClient = apiClient;\r\n    }\r\n  \r\n    async getAllWorkplaces() {\r\n      const path = '/workplace';\r\n      return this.apiClient.get(path);\r\n    }\r\n\r\n    async getWorkplaceById(workplaceId) {\r\n      const path = `/workplace/${encodeURIComponent(workplaceId)}`;\r\n      return this.apiClient.get(path);\r\n    }    \r\n  }\r\n\r\nexport default WorkplaceApi;","import TimereportingApiService from \"../timereport/timereportingApiService\";\r\n\r\nconst timereportingApiService = new TimereportingApiService();\r\n\r\nclass TimereportingApi {\r\n    constructor(apiClient) {\r\n      this.apiClient = apiClient;\r\n    }\r\n  \r\n    async getTimereportsByAllWorkplaces() {\r\n      try {\r\n        const response = await fetch(`http://localhost:5000/api/v1/timereport`);\r\n        const data = await response.json();\r\n        // Process the fetched data\r\n        timereportingApiService.createTimereportTableRows(data);\r\n        timereportingApiService.createTimereportDetailsModal(data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching timereports:\", error);\r\n      }\r\n    }\r\n  \r\n    async getTimereportsByWorkplaceId(workplaceId) {\r\n      try {\r\n        const response = await fetch(`http://localhost:5000/api/v1/timereport?workplace=${workplaceId}`);\r\n        const data = await response.json();\r\n        // Process the fetched data\r\n        timereportingApiService.createTimereportTableRows(data);\r\n        timereportingApiService.createTimereportDetailsModal(data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching timereports:\", error);\r\n      }\r\n    }\r\n  \r\n    async getTimereportByTimereportId(reportId) {\r\n      try {\r\n        const response = await fetch(`http://localhost:5000/api/v1/timereport/${reportId}`);\r\n        const data = await response.json();\r\n        // Update the modal with the fetched report data\r\n        timereportingApiService.createTimereportTableRows(data);\r\n        timereportingApiService.createTimereportDetailsModal(data);\r\n        // Show the modal\r\n        $(`#reportDetails_${reportId}`).modal('show');\r\n      } catch (error) {\r\n        console.error('Error fetching report data:', error);\r\n      }\r\n    }\r\n  \r\n    async getTimereportsByWorkplaceIdAndFromDate(workplaceId, fromDate) {\r\n      try {\r\n        const response = await fetch(`http://localhost:5000/api/v1/timereport?workplace=${workplaceId}&from_date=${fromDate}`);\r\n        const data = await response.json();\r\n        // Process the fetched data\r\n        timereportingApiService.createTimereportTableRows(data);\r\n        timereportingApiService.createTimereportDetailsModal(data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching timereports:\", error);\r\n      }\r\n    }\r\n  \r\n    async getTimereportsByWorkplaceIdAndToDate(workplaceId, toDate) {\r\n      try {\r\n        const response = await fetch(`http://localhost:5000/api/v1/timereport?workplace=${workplaceId}&to_date=${toDate}`);\r\n        const data = await response.json();\r\n        // Process the fetched data\r\n        timereportingApiService.createTimereportTableRows(data);\r\n        timereportingApiService.createTimereportDetailsModal(data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching timereports:\", error);\r\n      }\r\n    }\r\n  \r\n    async getTimereportsByWorkplaceIdBetweenDates(workplaceId, fromDate, toDate) {\r\n      try {\r\n        const response = await fetch(`http://localhost:5000/api/v1/timereport?workplace=${workplaceId}&from_date=${fromDate}&to_date=${toDate}`);\r\n        const data = await response.json();\r\n        return data;\r\n      } catch (error) {\r\n        console.error(\"Error fetching timereports:\", error);\r\n        return null;\r\n      }\r\n    }\r\n  \r\n    async getTimereportsByAllWorkplacesBetweenDates(fromDate, toDate) {\r\n        try {\r\n          const response = await fetch(`http://localhost:5000/api/v1/timereport?from_date=${fromDate}&to_date=${toDate}`);\r\n          const data = await response.json();\r\n          // Process the fetched data\r\n          timereportingApiService.createTimereportTableRows(data);\r\n          timereportingApiService.createTimereportDetailsModal(data);\r\n        } catch (error) {\r\n          console.error(\"Error fetching timereports:\", error);\r\n        }\r\n      }\r\n    \r\n      async getTimereportsByAllWorkplacesAndFromDate(fromDate) {\r\n        try {\r\n          const response = await fetch(`http://localhost:5000/api/v1/timereport?from_date=${fromDate}`);\r\n          const data = await response.json();\r\n          // Process the fetched data\r\n          timereportingApiService.createTimereportTableRows(data);\r\n          timereportingApiService.createTimereportDetailsModal(data);\r\n        } catch (error) {\r\n          console.error(\"Error fetching timereports:\", error);\r\n        }\r\n      }\r\n    \r\n      async getTimereportsByAllWorkplacesAndToDate(toDate) {\r\n        try {\r\n          const response = await fetch(`http://localhost:5000/api/v1/timereport?to_date=${toDate}`);\r\n          const data = await response.json();\r\n          // Process the fetched data\r\n          timereportingApiService.createTimereportTableRows(data);\r\n          timereportingApiService.createTimereportDetailsModal(data);\r\n        } catch (error) {\r\n          console.error(\"Error fetching timereports:\", error);\r\n        }\r\n      }\r\n    }\r\n    \r\nexport default TimereportingApi;\r\n    \r\n  ","import TimereportingWorkplaceApi from '../../timereporting.api/workplace/timereportingWorkplaceApi';\r\nimport TimereportingApiClient from '../../timereporting.api/timereportingApiClient';\r\n\r\nconst selectedApiEndpoint = \"http://localhost:5000/api/v1\";\r\nconst timereportingApiClient = new TimereportingApiClient(selectedApiEndpoint);\r\nconst timereportingWorkplaceApi = new TimereportingWorkplaceApi(timereportingApiClient);\r\n\r\nclass TimereportingApiService {\r\n\r\n  createTimereportTableRows(data) {\r\n    console.log(\"[API - RESPONSE]:\", data);\r\n    // Sort the data by report.id in ascending order\r\n    data.sort((b, a) => a.id - b.id);\r\n  \r\n    // Clean the time-report-table by removing all existing rows\r\n    const tableBody = document.querySelector(\"#time-report-table tbody\");\r\n    tableBody.innerHTML = \"\";\r\n  \r\n    // create new table rows based on the fetched data\r\n    data.forEach(async (report) => {\r\n      const workplace = await timereportingWorkplaceApi.getWorkplaceById(report.workplaceId);\r\n      const row = `<tr>\r\n        <td>${new Date(report.date).toISOString().split('T')[0]}</td>\r\n        <td>${workplace.name}</td>\r\n        <td>${report.hours.toFixed(2)}</td>\r\n        <td>\r\n          <button type=\"button\" class=\"btn btn-light\" data-bs-toggle=\"modal\" data-bs-target=\"#timereportDetails_${report.id}\">\r\n            <i class=\"btn btn-secondary bi bi-info-circle m-0\"></i>\r\n          </button>\r\n        </td>\r\n      </tr>`;\r\n      tableBody.insertAdjacentHTML(\"beforeend\", row);\r\n    });\r\n  }\r\n  \r\n  createTimereportDetailsModal(data) {\r\n    const modalContainer = document.querySelector(\"#modal-container\");\r\n    modalContainer.innerHTML = \"\";\r\n  \r\n    data.forEach(async (report) => {\r\n      const workplace = await timereportingWorkplaceApi.getWorkplaceById(report.workplaceId);\r\n      const modal = `\r\n      <div id=\"modal-container\"> \r\n        <div class=\"modal fade\" id=\"timereportDetails_${report.id}\" tabindex=\"-1\" aria-labelledby=\"timereportModalLabel\" aria-hidden=\"true\">\r\n          <div class=\"modal-dialog modal-dialog-centered\">\r\n            <div class=\"modal-content\">\r\n              <div class=\"modal-header\">\r\n                <h5 class=\"modal-title\" id=\"timereportModalLabel\">\r\n                  Tidsrapportdetaljer\r\n                </h5>\r\n                <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Stäng\"></button>\r\n              </div>\r\n              <div class=\"card\">\r\n                <div class=\"card-body\">\r\n                  <p id=\"id\"><strong>RAPPORT ID -</strong> ${report.id}</p>\r\n                  <p id=\"workplace\"><strong>Arbetsplats Id:</strong> ${report.workplaceId}</p>\r\n                  <p id=\"name\"><strong>Arbetsplatsnamn:</strong> ${workplace.name}</p>\r\n                  <p id=\"date\"><strong>Datum:</strong> ${new Date(report.date).toISOString().split('T')[0]}</p>\r\n                  <p id=\"hours\"><strong>Arbetstimmar:</strong> ${report.hours.toFixed(2)}</p>\r\n                  <p id=\"\"><strong>Info:</strong> ${report.info}</p>\r\n                  <div class=\"text-center\">\r\n                    <img src=\"${report.imageFile || '/img/default/timereport/no_time_report_image.png'}\" alt=\"Workplace Image\" class=\"img-fluid\">\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>`;\r\n      modalContainer.insertAdjacentHTML(\"beforeend\", modal);\r\n    });\r\n  }\r\n}\r\n\r\nexport default TimereportingApiService;","class TimereportingApiClient {\r\n  constructor(apiBaseUrl) {\r\n    this.apiBaseUrl = apiBaseUrl;\r\n  }\r\n\r\n  async sendRequest(method, path, data = null) {\r\n    const url = `${this.apiBaseUrl}${path}`;\r\n    const headers = {};\r\n\r\n    if (data) {\r\n      headers['Content-Type'] = 'application/json';\r\n    }\r\n\r\n    const response = await fetch(url, {\r\n      method,\r\n      headers,\r\n      body: data ? JSON.stringify(data) : null\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Request failed with status ${response.status}`);\r\n    }\r\n\r\n    const responseData = await response.json();\r\n    return responseData;\r\n  }\r\n\r\n  async get(path) {\r\n    return this.sendRequest('GET', path);\r\n  }\r\n\r\n  async post(path, data) {\r\n    return this.sendRequest('POST', path, data);\r\n  }\r\n\r\n  async put(path, data) {\r\n    return this.sendRequest('PUT', path, data);\r\n  }\r\n\r\n  async delete(path) {\r\n    return this.sendRequest('DELETE', path);\r\n  }\r\n}\r\n\r\nexport default TimereportingApiClient;","class TimereportingWorkplaceApi {\r\n    constructor(apiClient) {\r\n      this.apiClient = apiClient;\r\n    }\r\n  \r\n    async getAllWorkplaces() {\r\n      const path = '/workplace';\r\n      return this.apiClient.get(path);\r\n    }\r\n\r\n    async getWorkplaceById(workplaceId) {\r\n      const path = `/workplace/${encodeURIComponent(workplaceId)}`;\r\n      return this.apiClient.get(path);\r\n    }    \r\n  }\r\n\r\nexport default TimereportingWorkplaceApi;","module.exports = jQuery;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","﻿import appConfig from '../../../../application/appConfig';\r\nimport TrinaxApiClient from '../../../arbetsprov.trinax.api/trinaxApiClient';\r\nimport TimereportApi from '../../../arbetsprov.trinax.api/timereport/timereportApi';\r\nimport TimereportApiService from '../../../arbetsprov.trinax.api/timereport/timereportApiService';\r\nimport TimereportingApiClient from '../../../timereporting.api/timereportingApiClient';\r\nimport TimereportingApi from '../../../timereporting.api/timereport/timereportingApi';\r\n\r\nlet apiEndpoint = document.getElementById('api-endpoint').value;\r\n\r\nasync function fetchAllWorkplaces() {\r\n  try {\r\n    const workplaceFilter = $('#workplace-filter');\r\n    // Fetch workplaces and fill the combo box\r\n    const response = await fetch(`${apiEndpoint}/workplace`);\r\n    const data = await response.json();\r\n\r\n    // Clear existing options\r\n    workplaceFilter.empty();\r\n\r\n    // Add the \"Get all tidrapporter\" option\r\n    const getAllOptionHTML = '<option value=\"0\" class=\"get-all-option\" selected>Få alla tidrapporter</option>';\r\n    workplaceFilter.append(getAllOptionHTML);\r\n\r\n    // Add other workplace options\r\n    data.forEach(workplace => {\r\n      const optionHTML = `<option value=\"${workplace.id}\">${workplace.name}</option>`;\r\n      workplaceFilter.append(optionHTML);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error:', error);\r\n  }\r\n}\r\n\r\n$('#api-endpoint').on('change', function() {\r\n  const selectedIndex = this.selectedIndex;\r\n  const workplaceFilter = $('#workplace-filter');\r\n  \r\n  if (selectedIndex !== 0) {\r\n    apiEndpoint = document.getElementById('api-endpoint').value;\r\n    const timereportingHTMLOptions = '<option value=\"0\" class=\"get-all-option\" selected>Få alla tidrapporter</option>';\r\n    workplaceFilter.prepend(timereportingHTMLOptions);\r\n    fetchAllWorkplaces();\r\n  } else {\r\n    apiEndpoint = document.getElementById('api-endpoint').value;\r\n    window.location.reload();\r\n  }\r\n});\r\n\r\nconst trinaxApiClient = new TrinaxApiClient(apiEndpoint, appConfig.getApiAuthorizationKey());\r\nconst timereportApi = new TimereportApi(trinaxApiClient);\r\nconst timereportApiService = new TimereportApiService();\r\n\r\nconst timereportingApiClient = new TimereportingApiClient(apiEndpoint);\r\nconst timereportingApi = new TimereportingApi(timereportingApiClient, apiEndpoint);\r\n\r\n\r\nasync function fetchTimereports() {\r\n  console.log(`We are fetching from ${apiEndpoint}`);\r\n  try {\r\n    const fromDate = document.getElementById('from-date').value;\r\n    const toDate = document.getElementById('to-date').value;\r\n    const workplaceId = document.getElementById('workplace-filter').value;\r\n\r\n    let timereports;\r\n\r\n    if (apiEndpoint === \"https://arbetsprov.trinax.se/api/v1\") {\r\n      // Use Trinax API for fetching data from Trinax database\r\n      if (fromDate && toDate) {\r\n        timereports = await timereportApi.getTimereportsByDateRange(fromDate, toDate);\r\n      } else if (fromDate) {\r\n        timereports = await timereportApi.getTimereportsFromDate(fromDate);\r\n      } else if (toDate) {\r\n        timereports = await timereportApi.getTimereportsToDate(toDate);\r\n      } else {\r\n        timereports = await timereportApi.getAllTimereports();\r\n      }\r\n      // Filter timereports based on workplace_id\r\n      timereports = timereports.filter(report => report.workplace_id === parseInt(workplaceId));\r\n      // Handle the response and update the UI accordingly\r\n      timereportApiService.createTimereportTableRows(timereports);\r\n      timereportApiService.createTimereportDetailsModal(timereports);\r\n    } else {\r\n      // Use Timereporting API for fetching data from local MySql database\r\n      if (workplaceId && fromDate && toDate) {\r\n        timereports = await timereportingApi.getTimereportsByWorkplaceIdBetweenDates(workplaceId, fromDate, toDate);\r\n      } else if (workplaceId && fromDate) {\r\n        timereports = await timereportingApi.getTimereportsByAllWorkplacesAndFromDate(workplaceId, fromDate);\r\n      } else if (workplaceId && toDate) {\r\n        timereports = await timereportingApi.getTimereportsByWorkplaceIdAndToDate(workplaceId, toDate);\r\n      } else if (workplaceId) {\r\n        timereports = await timereportingApi.getTimereportsByWorkplaceId(workplaceId);\r\n      } else if (fromDate && toDate) {\r\n        timereports = await timereportingApi.getTimereportsByAllWorkplacesBetweenDates(fromDate, toDate);\r\n      } else if (fromDate) {\r\n        timereports = await timereportingApi.getTimereportsByAllWorkplacesAndFromDate(fromDate);\r\n      } else if (toDate) {\r\n        timereports = await timereportingApi.getTimereportsByAllWorkplacesAndToDate(toDate);\r\n      } else {\r\n        timereports = await timereportingApi.fetchTimereportsByAllWorkplacesForEntirePeriod();\r\n      }\r\n    }\r\n  } catch (error) {\r\n    // Handle the error\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nconst button = document.getElementById('get-timereports');\r\nbutton.addEventListener('click', fetchTimereports);"],"names":[],"sourceRoot":""}