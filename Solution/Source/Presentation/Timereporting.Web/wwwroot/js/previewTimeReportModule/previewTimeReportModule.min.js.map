{"version":3,"file":"js/previewTimeReportModule/previewTimeReportModule.min.js","mappings":"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","sources":["webpack://webpack-mvc/external var \"jQuery\"","webpack://webpack-mvc/webpack/bootstrap","webpack://webpack-mvc/./source/js/application/appIdentityCore.js","webpack://webpack-mvc/./source/js/infrastructure/datetime/dateTimeProvider.js","webpack://webpack-mvc/./source/js/application/logging/appLogger.js","webpack://webpack-mvc/./source/js/presentation/timereporting.web/views/timereport/previewTimeReportModule.js"],"sourcesContent":["module.exports = jQuery;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import appSettings from '../application/appsettings.json';\r\n\r\nconst appIdentityCore = {\r\n  config: appSettings,\r\n\r\n  loadConfig(config) {\r\n    this.config = { ...this.config, ...config };\r\n  },\r\n\r\n  getAppBaseName() {\r\n    return this.config.appBaseName;\r\n  },\r\n\r\n  getAppBaseUrl() {\r\n    return this.config.appBaseUrl;\r\n  },\r\n\r\n  getAppEnvironment() {\r\n    return this.config.appEnvironment;\r\n  },\r\n\r\n  getAppLogLevel() {\r\n    return this.config.appLogLevel;\r\n  },\r\n\r\n  getAppVersion() {\r\n    return this.config.appVersion;\r\n  },\r\n\r\n  getAppMaxRequestSize() {\r\n    return this.config.appMaxRequestSize;\r\n  },\r\n\r\n  getApiBaseName() {\r\n    return this.config.apiBaseName;\r\n  },\r\n\r\n  getApiBaseUrl() {\r\n    return this.config.apiBaseUrl;\r\n  },\r\n\r\n  getApiEnvironment() {\r\n    return this.config.apiEnvironment;\r\n  },\r\n\r\n  getApiVersion() {\r\n    return this.config.apiVersion;\r\n  },\r\n\r\n  splitVersion(version) {\r\n    return version.split('.');\r\n  },\r\n\r\n  getAppSyncVersion() {\r\n    const { appBuildMajorVersion, appBuildMinorVersion, appBuildPatchVersion } = this.config;\r\n    return `${appBuildMajorVersion}.${appBuildMinorVersion}.${appBuildPatchVersion}`;\r\n  },\r\n\r\n  getApiSyncVersion() {\r\n    const { apiBuildMajorVersion, apiBuildMinorVersion, apiBuildPatchVersion } = this.config;\r\n    return `${apiBuildMajorVersion}.${apiBuildMinorVersion}.${apiBuildPatchVersion}`;\r\n  },\r\n\r\n  getAppBaseUrl() {\r\n    if (this.config.appEnvironment === 'DEVELOPMENT') {\r\n      return 'http://localhost:5001';\r\n    } else if (this.config.appEnvironment === 'STAGING') {\r\n      return 'https://staging-domain.com';\r\n    } else if (this.config.appEnvironment === 'PRODUCTION') {\r\n      return 'https://production-domain.com';\r\n    }\r\n  },\r\n};\r\n\r\nexport default appIdentityCore;\r\n","// A class for providing date and time information\r\nclass dateTimeProvider {\r\n  // Get the current date and time\r\n  static getCurrentDateTime() {\r\n    const currentDate = new Date();\r\n    const options = {\r\n      day: '2-digit',\r\n      month: '2-digit',\r\n      year: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      second: '2-digit',\r\n      fractionalSecondDigits: 3,\r\n    };\r\n    // Return the formatted current date and time as a string\r\n    return currentDate.toLocaleString('en-GB', options);\r\n  }\r\n\r\n  // Get the current time\r\n  static getCurrentTime() {\r\n    const currentDate = new Date();\r\n    const options = {\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      second: '2-digit',\r\n      fractionalSecondDigits: 3,\r\n    };\r\n    // Return the formatted current time as a string\r\n    return currentDate.toLocaleString('en-GB', options);\r\n  }\r\n}\r\n\r\nexport default dateTimeProvider; ","import appIdentityCore from '../appIdentityCore';\r\nimport dateTimeProvider from '../../infrastructure/datetime/dateTimeProvider';\r\n\r\n\r\nconst appEnvironment = appIdentityCore.getAppEnvironment();\r\nconst appLogLevel = appIdentityCore.getAppLogLevel();\r\nconst currentDateTime = dateTimeProvider.getCurrentDateTime();\r\nconst currentTime = dateTimeProvider.getCurrentTime();\r\n\r\nclass appLogger {\r\n  constructor(appLogLevel) {\r\n    this.appEnvironment = appEnvironment;\r\n    this.appLogLevel = appLogLevel;\r\n    this.currentDateTime = currentDateTime;\r\n    this.currentTime = currentTime;\r\n  }\r\n\r\n  logTitle(label, appLogLevel = this.appLogLevel, includeTime = true) {\r\n    if (this.appEnvironment === 'DEVELOPMENT') {\r\n      const dateTimePrefix = includeTime ? `[${this.currentDateTime}] ` : '';\r\n      console.groupCollapsed(`${this.currentDateTime} [${appLogLevel}] ${dateTimePrefix}${label}`);\r\n    }\r\n  }\r\n\r\n  logMessage(message, includeTime) {\r\n    if (this.appEnvironment === 'DEVELOPMENT') {\r\n      const timePrefix = includeTime ? `${this.currentDateTime} -` : '';\r\n      console.log(`${timePrefix} ${message}`);\r\n    } else {\r\n      const timePrefix = includeTime ? `${this.currentDateTime} -` : '';\r\n      console.log(`${timePrefix} ${message}`);\r\n    }\r\n  }\r\n\r\n  logException(exception, includeTime) {\r\n    if (this.appEnvironment === 'DEVELOPMENT') {\r\n      const timePrefix = includeTime ? `${this.currentDateTime} -` : '';\r\n      console.log(`${timePrefix} ${exception}`);\r\n    }\r\n  }\r\n\r\n  logError(error, includeTime) {\r\n    if (this.appEnvironment === 'DEVELOPMENT') {\r\n      const timePrefix = includeTime ? `${this.currentDateTime} -` : '';\r\n      console.log(`${timePrefix} ${error}`);\r\n    }\r\n  }\r\n}\r\n\r\nexport default new appLogger(appLogLevel);\r\n","// Import application logger from appLogger.js\r\nimport appLogger from '../../../../application/logging/appLogger';\r\n\r\n// Define the fetchAllTimereports component\r\nfunction fetchAllTimereports() {\r\n  // Make an API request to fetch all timereports\r\n  fetch(\"http://localhost:5000/api/v1/timereport\")\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      // Process the fetched data\r\n      processTimereports(data);\r\n      appLogger.logError(\"fetchAllTimereports:\", data); // Log the error using the appLogger\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error fetching timereports:\", error);\r\n      appLogger.logError(\"Error fetching timereports:\", error); // Log the error using the appLogger\r\n    });\r\n}\r\n\r\nexport default fetchAllTimereports;\r\n\r\n\r\nfunction fetchTimereportByTimereportId(reportId) {\r\n  // Make a GET request to fetch the report data\r\n  fetch(`http://localhost:5000/api/v1/timereport/${reportId}`)\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      // Update the modal with the fetched report data\r\n      document.getElementById(`reportModalLabel`).innerText = 'Time Report Details';\r\n      document.getElementById(`name`).innerText = `Date: ${data.name}`;     \r\n      document.getElementById(`date`).innerText = `Date: ${data.date}`;\r\n      document.getElementById(`workplace`).innerText = `Workplace: ${data.workplace}`;\r\n      document.getElementById(`hours`).innerText = `Hours Worked: ${data.hours}`;\r\n      \r\n      // Show the modal\r\n      $(`#reportDetails_${reportId}`).modal('show');\r\n    })\r\n    .catch(error => {\r\n      console.error('Error fetching report data:', error);\r\n    });\r\n} window.fetchTimereportByTimereportId = fetchTimereportByTimereportId;\r\n\r\n\r\nfunction fetchTimereportsBetweenDatesForAllWorkplaces(fromDate, toDate) {\r\n  // Make an API request to fetch timereports between the selected dates for all workplaces\r\n  fetch(`http://localhost:5000/api/v1/timereport?from_date=${fromDate}&to_date=${toDate}`)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      // Process the fetched data\r\n      processTimereports(data);\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error fetching timereports:\", error);\r\n    });\r\n} window.fetchTimereportsBetweenDatesForAllWorkplaces = fetchTimereportsBetweenDatesForAllWorkplaces;\r\n\r\nfunction fetchTimereportsByStartDateForAllWorkplaces(fromDate) {\r\n  // Make an API request to fetch timereports starting from the selected date for all workplaces\r\n  fetch(`http://localhost:5000/api/v1/timereport?from_date=${fromDate}`)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      // Process the fetched data\r\n      processTimereports(data);\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error fetching timereports:\", error);\r\n    });\r\n} window.fetchTimereportsByStartDateForAllWorkplaces = fetchTimereportsByStartDateForAllWorkplaces;\r\n\r\nfunction fetchTimereportsByEndDateForAllWorkplaces(toDate) {\r\n  // Make an API request to fetch timereports up to the selected end date for all workplaces\r\n  fetch(`http://localhost:5000/api/v1/timereport?to_date=${toDate}`)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      // Process the fetched data\r\n      processTimereports(data);\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error fetching timereports:\", error);\r\n    });\r\n} window.fetchTimereportsByEndDateForAllWorkplaces = fetchTimereportsByEndDateForAllWorkplaces;\r\n\r\nfunction fetchTimereportsByWorkplace(workplaceId) {\r\n  // Make an API request to fetch timereports for the selected workplace\r\n  fetch(`http://localhost:5000/api/v1/timereport?workplace=${workplaceId}`)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      // Process the fetched data\r\n      processTimereports(data);\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error fetching timereports:\", error);\r\n    });\r\n} window.fetchTimereportsByWorkplace = fetchTimereportsByWorkplace;\r\n\r\nfunction fetchTimereportsByStartDate(workplaceId, fromDate) {\r\n  // Make an API request to fetch timereports starting from the selected date for the selected workplace\r\n  fetch(`http://localhost:5000/api/v1/timereport?workplace=${workplaceId}&from_date=${fromDate}`)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      // Process the fetched data\r\n      processTimereports(data);\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error fetching timereports:\", error);\r\n    });\r\n} window.fetchTimereportsByStartDate = fetchTimereportsByStartDate;\r\n\r\nfunction fetchTimereportsByEndDate(workplaceId, toDate) {\r\n  // Make an API request to fetch timereports up to the selected end date for the selected workplace\r\n  fetch(`http://localhost:5000/api/v1/timereport?workplace=${workplaceId}&to_date=${toDate}`)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      // Process the fetched data\r\n      processTimereports(data);\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error fetching timereports:\", error);\r\n    });\r\n} window.fetchTimereportsByEndDate = fetchTimereportsByEndDate;\r\n\r\nfunction fetchTimereportsBetweenDates(workplaceId, fromDate, toDate) {\r\n  // Make an API request to fetch timereports between the selected dates for the selected workplace\r\n  fetch(`http://localhost:5000/api/v1/timereport?workplace=${workplaceId}&from_date=${fromDate}&to_date=${toDate}`)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      // Process the fetched data\r\n      processTimereports(data);\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error fetching timereports:\", error);\r\n    });\r\n} window.fetchTimereportsBetweenDates = fetchTimereportsBetweenDates;\r\n\r\nfunction fetchTimeReports(event) {\r\n  event.preventDefault();\r\n\r\n  // Get selected values\r\n  var workplaceId = document.getElementById(\"workplace-filter\").value;\r\n  var fromDate = document.getElementById(\"from-date\").value;\r\n  var toDate = document.getElementById(\"to-date\").value;\r\n\r\n  // Determine the appropriate action based on the selected filters\r\n  if (workplaceId && fromDate && toDate) {\r\n    // Fetch timereports between selected dates for selected workplace\r\n    fetchTimereportsBetweenDates(workplaceId, fromDate, toDate);\r\n  } else if (workplaceId && fromDate) {\r\n    // Fetch timereports starting from the selected date for selected workplace\r\n    fetchTimereportsByStartDate(workplaceId, fromDate);\r\n  } else if (workplaceId && toDate) {\r\n    // Fetch timereports up to the selected end date for selected workplace\r\n    fetchTimereportsByEndDate(workplaceId, toDate);\r\n  } else if (workplaceId) {\r\n    // Fetch timereports for the selected workplace\r\n    fetchTimereportsByWorkplace(workplaceId);\r\n  } else if (fromDate && toDate) {\r\n    // Fetch timereports between the selected dates for all workplaces\r\n    fetchTimereportsBetweenDatesForAllWorkplaces(fromDate, toDate);\r\n  } else if (fromDate) {\r\n    // Fetch timereports starting from the selected date for all workplaces\r\n    fetchTimereportsByStartDateForAllWorkplaces(fromDate);\r\n  } else if (toDate) {\r\n    // Fetch timereports up to the selected end date for all workplaces\r\n    fetchTimereportsByEndDateForAllWorkplaces(toDate);\r\n  } else {\r\n    // Fetch all timereports from all workplaces\r\n    fetchAllTimereports();\r\n  }\r\n} window.fetchTimeReports = fetchTimeReports;\r\n\r\nfunction processTimereports(data) {\r\n  console.log(\"Processing timereports:\", data);\r\n  // Sort the data by report.workplaceId in ascending order\r\n  data.sort((a, b) => a.workplaceId - b.workplaceId);\r\n\r\n  // Clean the time-report-table by removing all existing rows\r\n  const tableBody = document.querySelector(\"#time-report-table tbody\");\r\n  tableBody.innerHTML = \"\";\r\n\r\n  // Generate new table rows based on the fetched data\r\n  data.forEach((report) => {\r\n    const buttonId = `btn_${report.id}`; // Unique ID for the button\r\n    const dateParts = report.date.split('T')[0]; // Extract the date part before the 'T' delimiter\r\n    const formattedDate = dateParts.split('-').reverse().join('-'); // Rearrange the date parts to format it as 'YYYY-MM-DD'\r\n\r\n    const row = `<tr>\r\n      <td>${formattedDate}</td>\r\n      <td>${report.name}</td>\r\n      <td>${report.hours.toFixed(2)}</td>\r\n      <td>\r\n        <button type=\"button\" class=\"btn btn-light\" data-bs-toggle=\"modal\" data-bs-target=\"#timereportDetails_${report.id}\" onclick=\"fetchTimereportByTimereportId(${report.id})\">\r\n          <i class=\"btn btn-secondary bi bi-info-circle m-0\"></i>\r\n        </button>\r\n      </td>\r\n    </tr>`;\r\n    tableBody.insertAdjacentHTML(\"beforeend\", row);\r\n  });\r\n\r\n  // Generate the modal elements\r\n  const modalContainer = document.querySelector(\"#modal-container\");\r\n  modalContainer.innerHTML = \"\";\r\n\r\n  data.forEach((report) => {\r\n    const modalId = `timereportDetails_${report.id}`;\r\n\r\n    const modal = `\r\n    <div class=\"modal fade\" id=\"${modalId}\" tabindex=\"-1\" aria-labelledby=\"timereportModalLabel\" aria-hidden=\"true\">\r\n      <div class=\"modal-dialog modal-dialog-centered\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\" id=\"timereportModalLabel\">\r\n              Tidsrapportdetaljer\r\n            </h5>\r\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Stäng\"></button>\r\n          </div>\r\n          <div class=\"card\">\r\n            <div class=\"card-body\">\r\n              <p><strong>Id:</strong> ${report.id}</p>\r\n              <p><strong>Name:</strong> ${report.name}</p>\r\n              <p><strong>Time:</strong> ${report.createdTime}</p>\r\n              <p><strong>Info:</strong> ${report.info}</p>\r\n              <div class=\"text-center\">\r\n                <img src=\"${report.imageUrl || '~/img/default/workplace/no_workplace_image.png'}\" alt=\"Workplace Image\" class=\"img-fluid\">\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>`;\r\n    modalContainer.insertAdjacentHTML(\"beforeend\", modal);\r\n  });\r\n}"],"names":["module","exports","jQuery","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","config","loadConfig","this","getAppBaseName","appBaseName","getAppBaseUrl","appBaseUrl","getAppEnvironment","appEnvironment","getAppLogLevel","appLogLevel","getAppVersion","appVersion","getAppMaxRequestSize","appMaxRequestSize","getApiBaseName","apiBaseName","getApiBaseUrl","apiBaseUrl","getApiEnvironment","apiEnvironment","getApiVersion","apiVersion","splitVersion","version","split","getAppSyncVersion","appBuildMajorVersion","appBuildMinorVersion","appBuildPatchVersion","getApiSyncVersion","apiBuildMajorVersion","apiBuildMinorVersion","apiBuildPatchVersion","static","Date","toLocaleString","day","month","year","hour","minute","second","fractionalSecondDigits","appIdentityCore","currentDateTime","dateTimeProvider","currentTime","constructor","logTitle","label","includeTime","dateTimePrefix","console","groupCollapsed","logMessage","message","timePrefix","log","logException","exception","logError","error","fetchTimereportsBetweenDatesForAllWorkplaces","fromDate","toDate","fetch","then","response","json","data","processTimereports","catch","fetchTimereportsByStartDateForAllWorkplaces","fetchTimereportsByEndDateForAllWorkplaces","fetchTimereportsByWorkplace","workplaceId","fetchTimereportsByStartDate","fetchTimereportsByEndDate","fetchTimereportsBetweenDates","sort","a","b","tableBody","document","querySelector","innerHTML","forEach","report","id","row","date","reverse","join","name","hours","toFixed","insertAdjacentHTML","modalContainer","modal","createdTime","info","imageUrl","window","fetchTimereportByTimereportId","reportId","getElementById","innerText","workplace","$","fetchTimeReports","event","preventDefault","value","appLogger"],"sourceRoot":""}